<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mytianya</title>
  
  <subtitle>Dream’s never sold, Blood’s never cold</subtitle>
  <link href="https://mytianya.github.io/atom.xml" rel="self"/>
  
  <link href="https://mytianya.github.io/"/>
  <updated>2024-04-15T01:27:03.632Z</updated>
  <id>https://mytianya.github.io/</id>
  
  <author>
    <name>mytianya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次破解Springboot Java项目授权过期问题</title>
    <link href="https://mytianya.github.io/2024/04/15/reverse-engineering/%E7%A0%B4%E8%A7%A3Springboot%20Java%E9%A1%B9%E7%9B%AE%E6%8E%88%E6%9D%83%E8%BF%87%E6%9C%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://mytianya.github.io/2024/04/15/reverse-engineering/%E7%A0%B4%E8%A7%A3Springboot%20Java%E9%A1%B9%E7%9B%AE%E6%8E%88%E6%9D%83%E8%BF%87%E6%9C%9F%E9%97%AE%E9%A2%98/</id>
    <published>2024-04-15T02:54:08.000Z</published>
    <updated>2024-04-15T01:27:03.632Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>从网上下载的一个商业的MQ程序启动报错授权过期，简单破解了下绕过了授权认证。<br>使用到工具与命令，jd-gui、recaf、jdk自带的jar命令。</p></blockquote><h2 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h2><ol><li><p>启动了下该MQ的startup.sh文件，启动日志报错。可以看出是com.primeton.ext.common.l72.Imprimatur.validate()验证失败了。<br><a href="/img/springboot-license-outdate-log.png" class="gallery-item" style="box-shadow: none;"> <img src="/img/springboot-license-outdate-log.png"></a></p></li><li><p>使用从startup.sh文件中找到该MQ的jar包，使用jd-gui.exe打开了该jar包，可以查看目录知道jar包是springboot技术开发并打包的。找了在lib目录的一个jar下面。<br><a href="/img/jd-gui-view-jar-1.PNG" title="alt text" class="gallery-item" style="box-shadow: none;"> <img src="/img/jd-gui-view-jar-1.PNG" alt="alt text"></a></p></li><li><p>使用jdk自带的jar命令解压包。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -xvf mq.jar</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用recaf在打开BOOT-INF/lib/验证jar包，破解方法很简单，修改jar包中的com.xxx.ext.common.l72.Imprimatur.validate()方法，直接使用recaf工具，选中validate方法右键使用编译汇编代码功能。在该校验方法中加入下面ICONST_1,IRETURN方法，相对于直接返回return true。<br><a href="/img/recaf-recompile.PNG" class="gallery-item" style="box-shadow: none;"> <img src="/img/recaf-recompile.PNG"></a></p></li><li><p>修改后使用recaf导出功能，把改好的class文件重新生成jar包，然后替换原来的jar包。</p></li><li><p>使用jar重新打包未springboot可执行程序。打包成功后可以再通过jd-gui.exe反编译查看下，是否都修改成功了。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -cfM0 mq.jar BOOT-INF/ META-INF/ org/</span><br></pre></td></tr></tbody></table></figure></li><li><p>重新执行启动MQ程序的startup.sh启动脚本，查看日志输出，发现已绕过授权成功启动。</p></li></ol></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;从网上下载的一个商业的MQ程序启动报错授权过期，简单破解了下绕过了授权认证。&lt;br&gt;使用到工具与命令，jd-gui、recaf、jdk自带的jar命令。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="逆向工程" scheme="https://mytianya.github.io/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="recaf" scheme="https://mytianya.github.io/tags/recaf/"/>
    
    <category term="jd-gui" scheme="https://mytianya.github.io/tags/jd-gui/"/>
    
  </entry>
  
  <entry>
    <title>ORA-00257归档程序错误</title>
    <link href="https://mytianya.github.io/2023/09/28/oracle/ORA-00257%E5%BD%92%E6%A1%A3%E7%A8%8B%E5%BA%8F%E9%94%99%E8%AF%AF/"/>
    <id>https://mytianya.github.io/2023/09/28/oracle/ORA-00257%E5%BD%92%E6%A1%A3%E7%A8%8B%E5%BA%8F%E9%94%99%E8%AF%AF/</id>
    <published>2023-09-27T18:00:08.000Z</published>
    <updated>2024-03-19T10:57:24.608Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>线上生成系统后台日志连接数据库报ORA-00257归档程序错误。借此了解下oracle日志归档模式和非归档模式以及如何解决该问题。</p></blockquote><span id="more"></span><h2 id="Oracle日志操作模式"><a href="#Oracle日志操作模式" class="headerlink" title="Oracle日志操作模式"></a>Oracle日志操作模式</h2><p>Oracle数据库在运行过程中，每一个实例都有一个相关的重做日志，在实例故障情况下保护数据库。<br>我们对数据的DML,DDL操作都会结构化为重做记录，可以用来重建对数据库所做的所有更改的数据，包括撤销段。<br>重做记录在SGA的重做日志缓冲区中以循环方式进行缓冲，并被数据库后台进程log Writer (LGWR)写入其中一个重做日志文件（Redo log files）中<br>由数据库库后台进程log Writer(LGWR)写入联机重做日志（Redo log files）中，当重做日志文件被填满时，会发生日志切换，根据是否启用归档分为两种情况：</p><p>1、如果归档被禁用（NOARCHIVELOG模式），则在将在记录在其中的更改写入数据文件后，这个填满的重做日志文件可用。</p><p>2、如果启用了归档（ARCHIVELOG模式），则在将记录的更改写入数据文件并归档后，LGWR就可以使用这个被填满的重做日志文件。</p><h2 id="归档优缺点"><a href="#归档优缺点" class="headerlink" title="归档优缺点"></a>归档优缺点</h2><p>可以进行完全、不完全恢复：由于对数据库所做的全部改动都记录在日志文件中，如果发生硬盘故障等导致数据文件丢失的话，则可以利用物理备份和归档日志完全恢复数据库，不会丢失任何数据。</p><p>一般生产系统推荐都开启归档模式，毕竟数据无价。</p><h2 id="归档常用操作"><a href="#归档常用操作" class="headerlink" title="归档常用操作"></a>归档常用操作</h2><h3 id="查看当前数据库归档模式"><a href="#查看当前数据库归档模式" class="headerlink" title="查看当前数据库归档模式"></a>查看当前数据库归档模式</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su <span class="operator">-</span> oracle #切换到oracle用户</span><br><span class="line">sqlplus <span class="operator">/</span>nolog</span><br><span class="line">conn <span class="operator">/</span><span class="keyword">as</span> sysdba;</span><br><span class="line"><span class="keyword">select</span> log_mode <span class="keyword">from</span> v$database;</span><br></pre></td></tr></tbody></table></figure><p><a href="/img/select_log_mode.png" class="gallery-item" style="box-shadow: none;"> <img src="/img/select_log_mode.png"></a></p><h3 id="开启归档模式"><a href="#开启归档模式" class="headerlink" title="开启归档模式"></a>开启归档模式</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shutdown immediate; #关闭数据库</span><br><span class="line">startup mount; #启动数据库到mount状态</span><br><span class="line"><span class="keyword">alter</span> database archivelog; #修改数据库到归档模式</span><br><span class="line"><span class="keyword">alter</span> database <span class="keyword">open</span>; #启动数据库</span><br><span class="line">archive log list; #查看归档配置</span><br></pre></td></tr></tbody></table></figure><h2 id="解决ORA-00257问题"><a href="#解决ORA-00257问题" class="headerlink" title="解决ORA-00257问题"></a>解决ORA-00257问题</h2><p>项目上面ORA-00257归档程序错误，为归档空间不足。解决办法：<br>1、删除多余的归档日志<br>2、增大归档日志的容量<br>3、关闭归档模式</p><h3 id="删除多于归档日志"><a href="#删除多于归档日志" class="headerlink" title="删除多于归档日志"></a>删除多于归档日志</h3><p>1、查看当前使用archivelog使用的百分比。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> linesize <span class="number">200</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> V$FLASH_RECOVERY_AREA_USAGE;</span><br></pre></td></tr></tbody></table></figure><p><a href="/img/flash_recovery_area_usage.png" class="gallery-item" style="box-shadow: none;"> <img src="/img/flash_recovery_area_usage.png"></a><br>2、查看当前归档日志所在目录<br>当前归档日志文件在/home/oracle/fast_recovery_area/AODB/archivelog/目录下</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> recovery;</span><br></pre></td></tr></tbody></table></figure><p><a href="/img/recovery.png" class="gallery-item" style="box-shadow: none;"> <img src="/img/recovery.png"></a><br>3、在此目录下根据日期删除过久的归档日志<br>4、使用rman维护控制文件</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rman target <span class="operator">&lt;</span>管理员用户<span class="operator">&gt;</span><span class="operator">/</span><span class="operator">&lt;</span>管理员密码<span class="operator">&gt;</span></span><br><span class="line">crosscheck archivelog <span class="keyword">all</span>; #检查错误文档</span><br><span class="line"><span class="keyword">delete</span> expired archivelog <span class="keyword">all</span>; #删除过期文档</span><br></pre></td></tr></tbody></table></figure><h3 id="修改归档日志存储大小跟容量"><a href="#修改归档日志存储大小跟容量" class="headerlink" title="修改归档日志存储大小跟容量"></a>修改归档日志存储大小跟容量</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> db_recover;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> db_recovery_file_dest_size<span class="operator">=</span><span class="number">2000</span>G <span class="keyword">scope</span><span class="operator">=</span>spfile</span><br></pre></td></tr></tbody></table></figure><p><a href="/img/show-parameter-db-recover.png" class="gallery-item" style="box-shadow: none;"> <img src="/img/show-parameter-db-recover.png"></a></p><h3 id="关闭归档模式"><a href="#关闭归档模式" class="headerlink" title="关闭归档模式"></a>关闭归档模式</h3><p>如果不是生产系统而是测试环境，可以关闭归档模式</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shutdown immediate; #关闭数据库</span><br><span class="line">startup mount; #启动数据库到mount状态</span><br><span class="line"><span class="keyword">alter</span> database noarchivelog; #修改数据库到归档模式</span><br><span class="line"><span class="keyword">alter</span> database <span class="keyword">open</span>; #启动数据库</span><br><span class="line">archive log list; #查看归档配置</span><br></pre></td></tr></tbody></table></figure><h2 id="项目真实造成归档满原因"><a href="#项目真实造成归档满原因" class="headerlink" title="项目真实造成归档满原因"></a>项目真实造成归档满原因</h2><p>实际项目提供的归档大小为1T按照目前项目量没有这么大的日志。在线上归档日志1T一天就打满了。</p><p>联想到最近对程序升级过，部分软件模块中可能存在频繁的DML操作。</p><p>通过记录了几个小时的AWR日志，下载下来查看程序中存在不正常的SQL更新语句，造成了频繁的更新产生了大量的日志，修复了此SQL问题，解决了该问题。</p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;线上生成系统后台日志连接数据库报ORA-00257归档程序错误。借此了解下oracle日志归档模式和非归档模式以及如何解决该问题。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="oracle" scheme="https://mytianya.github.io/categories/oracle/"/>
    
    
    <category term="ora-00257" scheme="https://mytianya.github.io/tags/ora-00257/"/>
    
  </entry>
  
  <entry>
    <title>求最多线段重合次数</title>
    <link href="https://mytianya.github.io/2023/09/27/alg/%E7%AE%97%E6%B3%95%EF%BC%9A%E6%B1%82%E6%9C%80%E5%A4%9A%E7%BA%BF%E6%AE%B5%E9%87%8D%E5%90%88%E6%AC%A1%E6%95%B0/"/>
    <id>https://mytianya.github.io/2023/09/27/alg/%E7%AE%97%E6%B3%95%EF%BC%9A%E6%B1%82%E6%9C%80%E5%A4%9A%E7%BA%BF%E6%AE%B5%E9%87%8D%E5%90%88%E6%AC%A1%E6%95%B0/</id>
    <published>2023-09-26T18:00:08.000Z</published>
    <updated>2024-02-27T06:59:45.010Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>最近在业务开发时，需要求值机柜台资源分配的使用时间段重叠部分不能超过使用次数限制。<br>简化成算法问题，就是求多个开始-结束的线段的最大重叠时间次数。</p></blockquote><p>举例：<br>求给定[1,3] [2,4] [4,7] [2,9]等线段求最大重合次数<br>答案是3次，1-3，2-4，2-9的重叠最大次数是3。</p><h2 id="两种解题思路："><a href="#两种解题思路：" class="headerlink" title="两种解题思路："></a>两种解题思路：</h2><h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><p>最多重叠的区域的结果的左端点leftx，数组其中的一个左端点。暴力遍历每一个左端点，落在最多数组时间端的就是最大重叠次数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最后重叠的线段的左节点一定是给定线段中其中一个线段的左节点</span></span><br><span class="line"><span class="comment"> * 因此求所有左节点，落在最多的线段中，就是最大重叠次数</span></span><br><span class="line"><span class="comment"> * O(N^2)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lines</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxLine1</span><span class="params">(<span class="type">int</span>[][] lines)</span>{</span><br><span class="line">    <span class="keyword">if</span>(lines==<span class="literal">null</span>||lines.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lines.length;i++){</span><br><span class="line">        <span class="type">int</span> left=lines[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;lines.length;j++){</span><br><span class="line">            <span class="keyword">if</span>(lines[j][<span class="number">0</span>]&lt;=left&amp;&amp;lines[j][<span class="number">1</span>]&gt;=left) t=t+<span class="number">1</span>;</span><br><span class="line">            max=Math.max(max,t);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="小根堆"><a href="#小根堆" class="headerlink" title="小根堆"></a>小根堆</h3><p>方案2：使用小根堆<br>满足条件的左节点一定是某个线段的左端点，那么通过该节点的线段一定左端点小于该结果leftx，右节点大于leftx。<br>通过小根堆的特性，留在堆的一定是大于左节点的端点。</p><ol><li>将所有线段按照左端点排序，减少遍历次数</li><li>遍历每一个线段，对于每一个线段</li><li>把右端点放入堆中，</li><li>左节点与堆顶比较，如果堆顶的元素小于左端点全部弹出</li><li>每次Max找最大重合次数作为答案<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxLine2</span><span class="params">(<span class="type">int</span>[][] lines)</span>{</span><br><span class="line">    <span class="keyword">if</span>(lines==<span class="literal">null</span>||lines.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Arrays.sort(lines,(a,b)-&gt;a[<span class="number">0</span>]-b[<span class="number">0</span>]);</span><br><span class="line">    PriorityQueue&lt;Integer&gt; heap=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> max=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lines.length;i++){</span><br><span class="line">        <span class="keyword">while</span> (!heap.isEmpty()&amp;&amp;heap.peek()&lt;=lines[i][<span class="number">0</span>]) heap.poll();</span><br><span class="line">        heap.add(lines[i][<span class="number">1</span>]);</span><br><span class="line">        max=Math.max(heap.size(),max);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;最近在业务开发时，需要求值机柜台资源分配的使用时间段重叠部分不能超过使用次数限制。&lt;br&gt;简化成算法问题，就是求多个开始-结束的线段的最大重叠时间次数。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="算法" scheme="https://mytianya.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="小根堆" scheme="https://mytianya.github.io/tags/%E5%B0%8F%E6%A0%B9%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个点播跟直播流媒体服务器玩玩</title>
    <link href="https://mytianya.github.io/2023/09/27/video/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%82%B9%E6%92%AD%E8%B7%9F%E7%9B%B4%E6%92%AD%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%A9%E7%8E%A9/"/>
    <id>https://mytianya.github.io/2023/09/27/video/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%82%B9%E6%92%AD%E8%B7%9F%E7%9B%B4%E6%92%AD%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%A9%E7%8E%A9/</id>
    <published>2023-09-26T18:00:08.000Z</published>
    <updated>2024-02-27T06:59:45.017Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>现在抖音、快手等直播实在是太火了，因此对音视频的开发非常感兴趣，查阅了相关资料，使用Nginx搭建一个简单的直播跟点播流媒体服务器，能够实时推流到服务器，同时在网页端播放直播的视频。</p></blockquote><h2 id="先上效果"><a href="#先上效果" class="headerlink" title="先上效果"></a>先上效果</h2><p>​使用OBS软件录制电脑桌面操作<strong>推流</strong>到自己搭建的流媒体服务器，然后在网页<strong>拉流</strong>播放。当然也可以采集摄像头、麦克风推流，或者推送本地视频到流媒体服务器。</p><p><a href="https://www.codehome.vip/upload/obs.gif" class="gallery-item" style="box-shadow: none;"> <img src="https://www.codehome.vip/upload/obs.gif"></a></p><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="Ubuntu18-04安装nginx-flv模块扩展"><a href="#Ubuntu18-04安装nginx-flv模块扩展" class="headerlink" title="Ubuntu18.04安装nginx-flv模块扩展"></a>Ubuntu18.04安装nginx-flv模块扩展</h3><p>这里我是用虚拟机安装了Ubuntu18.04先下载nginx1.19.3的源码与nginx-http-flv-module的源码。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/winshining/nginx-http-flv-module/archive/master.zip</span><br><span class="line">wget http://nginx.org/download/nginx-1.19.3.tar.gz  &amp;&amp; tar -zxvf nginx-1.19.3.tar.gz</span><br></pre></td></tr></tbody></table></figure><p>解压下载的个源码进行编译，这样一个Nginx搭建的流媒体服务器就好了。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.19.3 #进入nginx源码目录</span><br><span class="line">./configure --add-module=../nginx-http-flv-module-master</span><br><span class="line">vim objs/Makefile #删除-Werror</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><h2 id="进行点播与直播配置"><a href="#进行点播与直播配置" class="headerlink" title="进行点播与直播配置"></a>进行点播与直播配置</h2><p>​上面已经安装好了nginx，编辑/usr/local/nginx/conf/nginx.conf进行相关配置。这里直接贴出完整的配置。其中rtmp为开启rtmp服务功能，并且为了能够在网页端播放开启了hls。推流的rmtp流会转换成hls协议的ts切片，保存在服务器上，nginx配置了location让网页能够访问切好的hls切片。</p><p>​这里解释下rtmp是adobe的私有协议，必须使用flash播放。hls是苹果开发的视频传输协议使用http进行传输。ios跟android支撑的都很好，一般进行跨平台直播使用hls协议比较常见。</p><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> {</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="section">rtmp</span> {                <span class="comment">#RTMP服务</span></span><br><span class="line">   <span class="section">server</span> {</span><br><span class="line">       <span class="attribute">listen</span> <span class="number">1935</span>;  <span class="comment">#//服务端口</span></span><br><span class="line">        <span class="attribute">chunk_size</span> <span class="number">4096</span>;   <span class="comment">#//数据传输块的大小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="attribute">application</span> vod {</span><br><span class="line">                <span class="attribute">play</span> /opt/video/vod; <span class="comment">#//视频文件存放位置。</span></span><br><span class="line">        }</span><br><span class="line">        <span class="attribute">application</span> live{</span><br><span class="line">            <span class="attribute">live</span> <span class="literal">on</span>; <span class="comment">#直播</span></span><br><span class="line">            <span class="attribute">hls</span> <span class="literal">on</span>; <span class="comment">#把直播服务器改造成实时回发服务器,视频切片成ts</span></span><br><span class="line">            <span class="attribute">wait_key</span> <span class="literal">on</span>; <span class="comment">#对视频切片进行保护</span></span><br><span class="line">            <span class="attribute">hls_path</span> /opt/video/rtmp/hls; <span class="comment">#ts切片存放位置</span></span><br><span class="line">            <span class="attribute">hls_fragment</span> <span class="number">10s</span>; <span class="comment">#切片大小</span></span><br><span class="line">            <span class="attribute">hls_playlist_length</span> <span class="number">60s</span>; <span class="comment">#回看的时间</span></span><br><span class="line">            <span class="attribute">hls_continuous</span> <span class="literal">on</span>; <span class="comment">#连续模式</span></span><br><span class="line">            <span class="attribute">hls_cleanup</span> <span class="literal">on</span>; <span class="comment">#对多余切片进行删除</span></span><br><span class="line">            <span class="attribute">hls_nested</span> <span class="literal">on</span>; <span class="comment">#嵌套模式</span></span><br><span class="line">        }</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line"><span class="section">http</span> {</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="section">location</span> /stat {    <span class="comment">#第二处添加的location字段。</span></span><br><span class="line">            <span class="attribute">rtmp_stat</span> all;</span><br><span class="line">        <span class="attribute">rtmp_stat_stylesheet</span> stat.xsl;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   <span class="section">location</span> /stat.xsl { <span class="comment">#第二处添加的location字段。</span></span><br><span class="line">       <span class="attribute">root</span> /usr/local/nginx-http-flv-module/;</span><br><span class="line">   }</span><br><span class="line"><span class="section">location</span> /hls {</span><br><span class="line">    <span class="section">types</span> {</span><br><span class="line">        application/vnd.apple.<span class="attribute">mpegurl</span> m3u8;</span><br><span class="line">        video/<span class="attribute">mp2t</span> ts;</span><br><span class="line">    }</span><br><span class="line">    <span class="attribute">alias</span> /opt/video/rtmp/hls;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin *; </span><br><span class="line">}</span><br><span class="line">   <span class="section">location</span> / {</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h2><p>使用obs推流推送到rtmp://192.168.227.128/live串流密钥随便填写即可。</p><p><a href="/img/obc-settings.png" title="image-20201017125252531" class="gallery-item" style="box-shadow: none;"> <img src="/img/obc-settings.png" alt="image-20201017125252531"></a></p><p>​h5网页端采用video.js进行播放直播流视频,这里的播放的地址是切好片的m3u8文件地址，m3u8存放了每一个小切片的地址。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">example-video</span> <span class="attr">width</span>=<span class="string">600</span> <span class="attr">height</span>=<span class="string">300</span> <span class="attr">class</span>=<span class="string">"video-js vjs-default-skin"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span></span></span><br><span class="line"><span class="tag">     <span class="attr">src</span>=<span class="string">"http://192.168.227.128/hls/test/index.m3u8"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">type</span>=<span class="string">"application/x-mpegURL"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//vjs.zencdn.net/7.8.2/video-js.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//vjs.zencdn.net/7.8.2/video.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"videojs-contrib-hls.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/browse/@videojs/http-streaming@2.2.3/dist/videojs-http-streaming.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> player = <span class="title function_">videojs</span>(<span class="string">'example-video'</span>);</span></span><br><span class="line"><span class="language-javascript">player.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​上面的nginx配置还配置了本地视频文件点播配置，把视频文件放在/opt/video/vod位置，使用vlc填写rtmp://192.168.227.128/vod/qlgame.mp4进行播放即可。</p><p><a href="/img/yinshipin-show.png" title="image-20201018163103770" class="gallery-item" style="box-shadow: none;"> <img src="/img/yinshipin-show.png" alt="image-20201018163103770"></a></p><p><strong>以上搭建只是测试学习使用，实际音视频开发涉及采集、编码、推流、传输、拉流、解码等等过程，每一个过程都设计许多知识。后面音视频开发学习笔记，等我攒了一些笔记发出来互相学习。</strong></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;现在抖音、快手等直播实在是太火了，因此对音视频的开发非常感兴趣，查阅了相关资料，使用Nginx搭建一个简单的直播跟点播流媒体服务器，能够实时推流到服务器，同时在网页端播放直播的视频。&lt;/p</summary>
      
    
    
    
    <category term="流媒体" scheme="https://mytianya.github.io/categories/%E6%B5%81%E5%AA%92%E4%BD%93/"/>
    
    
    <category term="音视频" scheme="https://mytianya.github.io/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud版本新旧命名方式</title>
    <link href="https://mytianya.github.io/2023/09/26/springcloud/SpringCloud%E7%89%88%E6%9C%AC%E6%96%B0%E6%97%A7%E5%91%BD%E5%90%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://mytianya.github.io/2023/09/26/springcloud/SpringCloud%E7%89%88%E6%9C%AC%E6%96%B0%E6%97%A7%E5%91%BD%E5%90%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2023-09-25T18:00:18.000Z</published>
    <updated>2024-02-27T06:59:45.016Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><h2 id="看看SpringCloud已发布版本"><a href="#看看SpringCloud已发布版本" class="headerlink" title="看看SpringCloud已发布版本"></a>看看SpringCloud已发布版本</h2><p>当前已发布SpringCloud稳定版本见下图，在线查看地址:<a href="https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies">https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies</a></p><p><a href="/img/springcloud-version.png" title="springcloud-version" class="gallery-item" style="box-shadow: none;"> <img src="/img/springcloud-version.png" alt="springcloud-version"></a></p><h2 id="SpringCloud新旧命名方式"><a href="#SpringCloud新旧命名方式" class="headerlink" title="SpringCloud新旧命名方式"></a>SpringCloud新旧命名方式</h2><ul><li><p><del>采用版本名+版本号，其中版本名采用伦敦地铁站命名，其中按照地铁首字母A-Z依次命令如Hoxton.SR9</del>。但是现在已更改为主版本号.次版本号.修订号如2020.0.0</p></li><li><p>旧版本命名方式中,开发的快照版本(BUILD-SNAPSHOT)到里程碑版本(M),开发的差不多到会发布的候选发布版(RELEASE),最后到正式版(SR)版本。</p></li><li><p>新版本命名是<code>YYYY.MINOR.MICRO[-MODIFIER]</code>，拿<strong>2020.0.1-SNAPSHOT</strong> 这个版本来说，其中YYYY为年份全称、MINOR为辅助版本号、MICRO为补丁版本号。MODIFIER同上述修饰关键节点，BUILD-SNAPSHOT、里程碑M等。</p></li></ul><h2 id="SpringCloud与SpringBoot版本对应关系"><a href="#SpringCloud与SpringBoot版本对应关系" class="headerlink" title="SpringCloud与SpringBoot版本对应关系"></a>SpringCloud与SpringBoot版本对应关系</h2><p>浏览器访问<a href="https://start.spring.io/actuator/info%EF%BC%8C%E5%9C%A8%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%89%BE%E5%88%B0spring-cloud%E5%8D%B3%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8BSpringCloud%E4%B8%8ESpringBoot%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB%E3%80%82">https://start.spring.io/actuator/info，在返回的数据中找到spring-cloud即可以查看SpringCloud与SpringBoot版本对应关系。</a></p><p><a href="/img/springcloud-springboot-version.png" title="springcloud-springboot-version" class="gallery-item" style="box-shadow: none;"> <img src="/img/springcloud-springboot-version.png" alt="springcloud-springboot-version"></a></p><h2 id="SpringCloud版本选择"><a href="#SpringCloud版本选择" class="headerlink" title="SpringCloud版本选择"></a>SpringCloud版本选择</h2><ul><li>根据上面的原则首先选择SpringCloud要与SpringBoot版本能够对应的上</li><li>SpringCloud应该优先选择SR的版本</li><li>采用官网推荐版本，每一个SpringCloud的文档均有推荐SpringBoot版本。如<a href="https://docs.spring.io/spring-cloud/docs/2020.0.0/reference/html/">https://docs.spring.io/spring-cloud/docs/2020.0.0/reference/html/</a></li><li>本人公司的SpringBoot框架使用的2.1.0.RELEASE,SpringCloud选择是Greenwich.SR4(有历史原因)。本系列教程<strong>SpringCloud采用Hoxton.SR9</strong>,<strong>SpringBoot采用 2.3.5.RELEASE。</strong></li></ul><p><strong>Springcloud企业项目实战问题汇总系列教程</strong>,所有资料和源码均在本人GitHub上，<a href="https://github.com/mytianya/springcloud-tutorials">https://github.com/mytianya/springcloud-tutorials</a></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;h2 id=&quot;看看SpringCloud已发布版本&quot;&gt;&lt;a href=&quot;#看看SpringCloud已发布版本&quot; class=&quot;headerlink&quot; title=&quot;看看SpringCloud已发布版本&quot;&gt;&lt;/a&gt;看看</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springcloud" scheme="https://mytianya.github.io/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>微服务架构简介</title>
    <link href="https://mytianya.github.io/2023/09/26/springcloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/"/>
    <id>https://mytianya.github.io/2023/09/26/springcloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/</id>
    <published>2023-09-25T18:00:08.000Z</published>
    <updated>2024-02-27T06:59:45.017Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><h2 id="微服务理论基础-康威法则"><a href="#微服务理论基础-康威法则" class="headerlink" title="微服务理论基础-康威法则"></a>微服务理论基础-康威法则</h2><p><strong>康威法则</strong>：“设计系统的架构受制于产生这些设计组织的沟通结构。”**即系统设计本质上反映了企业的组织机构。系统各个模块间的接口也反映了企业各个部门之间的信息流动和合作方式。</p><p>康威法则提出的各定律：</p><ul><li><p>第一定律 组织沟通方式会通过系统设计表达出来</p><pre><code>即组织的沟通方式决定了系统的设计方式</code></pre></li><li><p>第二定律 时间再多一件事情也不可能做的完美，但总有时间做完一件事情</p><pre><code>罗马不是一日建成的，学习解决首要问题。产品、软件、模块功能应该首先达到最小可用程度(Minimun Viable Product)</code></pre></li><li><p>第三定律 线性系统和线型组织架构间有潜在的异质同态特性</p><pre><code>这一定律是第一定律的具体应用，具体来说想要什么的系统就搭建什么样的团队，有什么样的团队就搭建什么样的系统。你需要搭建微服务架构的系统，那就需要微服务型的组织架构。每个团队负责自己的部分，对外提供相应的接口，团队间互不干扰，实现完全的**自治**。如此就能降低系统的依赖性，减少通信成本。</code></pre></li><li><p>第四定律 大的系统组织总是比小系统更倾向分解</p><pre><code>系统越复杂，越需要增加人手，人手越多，沟通成本也呈指数增长。分而治之便是大多数公司选择的解决方案。分不同的层级，分不同的小团队，让团队内部完成自治理，然后统一对外沟通。**微服务架构更多是关于组织和团队，而不是技术**。</code></pre></li></ul><h2 id="微服务架构定义"><a href="#微服务架构定义" class="headerlink" title="微服务架构定义"></a>微服务架构定义</h2><p>微服务架构是一种架构风格，没有单一的定义，随着时间的推移，业界达成已经形成共识，微服务架构的特征包括：</p><p><a href="/img/microservice.png" title="微服务定义" class="gallery-item" style="box-shadow: none;"> <img src="/img/microservice.png" alt="微服务定义"></a></p><ul><li><p><strong>一组小的服务</strong>：怎么定义这个小，专注于做好一件事情。在一个单体系统中，避免随着新功能的增加代码库日益庞大，模块之间的界限很难维护，相似的代码随处可见，通常会创建一些抽象层或者模块来保证代码的<strong>内聚性</strong>。在使用微服务架构时一个微服务同样要具有内聚性这一概念，Robert C.Martin有一个单一职责原则：把因相同原因变化的东西聚合在一起，而把不同原因而变化的东西分开。<strong>微服务中独立服务的划分程度，同样有内聚性、单一职责原则，根据业务的边界来确定某个功能代码应该放在那个微服务之中，确定该微服务专注的业务边界之内</strong>。</p></li><li><p><strong>独立的进程</strong>：每个服务运行在独立的进程中，能够以进程的方式进行横向扩展。</p></li><li><p><strong>轻量级通信</strong>：服务之间均通过网络调用（HTTP REST/RPC）进行通信，从而加强服务之间的隔离性，避免紧耦合。</p></li><li><p><strong>基于业务能力</strong>：基于业务能力来划分服务的边界。确定对于一个服务来说，我们应该暴露什么，应该隐藏什么。一个服务的变动，应该尽量避免该服务消费者的变动。</p></li><li><p><strong>独立部署</strong>：每个服务模块的开发人员可以进行完全的自治，独自开发、测试、部署。团队之间减少沟通的成本。</p></li><li><p><strong>无集中式管理</strong>：每个团队可以根据各自的业务需要，可以采用不同的技术栈，不同的存储机制，能够高效的完成业务目标即可。</p><p><strong>总结来说：微服务架构风格就是小而自治的服务，可以采用不同技术栈，拥有独立进程，进程之间采用网络调用通信，不同团队在业务边界之内开发、测试、部署。</strong></p></li></ul><h2 id="服务架构演进"><a href="#服务架构演进" class="headerlink" title="服务架构演进"></a>服务架构演进</h2><p><a href="/img/microservice1.png" class="gallery-item" style="box-shadow: none;"> <img src="/img/microservice1.png"></a></p><h2 id="微服务优点"><a href="#微服务优点" class="headerlink" title="微服务优点"></a>微服务优点</h2><ol><li><p>技术异构性：不同的服务可以采用最适合该服务的技术。</p></li><li><p>弹性：系统一个服务故障，不会引起级联故障，系统的其他组件还能使用。</p></li><li><p>扩展：庞大的单块服务只能作为一个整体进行扩展。即使系统中只有一小部分存在性能问题，也需要对整个服务进行扩展。如果使用较小的多个服务，则可以只对需要扩展的服务进行扩展，这样就可以把那些不需要扩展的服务运行在更小的、性能稍差的硬件上。</p></li><li><p>简化部署</p></li><li><p>更小粒度的服务粒度，带来的易于重用已有的功能</p></li><li><p>服务更改维护代价更小</p></li></ol><h2 id="微服务缺点"><a href="#微服务缺点" class="headerlink" title="微服务缺点"></a>微服务缺点</h2><ol><li><p>服务间的通信成本。</p></li><li><p>分布式系统的复杂性。</p></li><li><p>服务的运维管理。</p></li><li><p>分布部署服务出错,问题的定位追踪。</p></li></ol><h2 id="微服务支撑组件"><a href="#微服务支撑组件" class="headerlink" title="微服务支撑组件"></a>微服务支撑组件</h2><pre><code>微服务只是一种架构手段，当我们将一个单体系统拆分成微服务架构风格时，微服务架构的带来问题该如何解决呢？比如服务进程之间的通信、服务之间错中复杂的依赖关系导致的线上问题如何排查、分布式系统带来的一致性问题等问题。因此微服务产生了一些系列的支撑组件：</code></pre><ol><li>服务治理</li><li>服务负载均衡</li><li>服务网关</li><li>熔断、限流、降级</li><li>服务分布式链路跟踪</li><li>统一配置管理</li></ol><h2 id="微服务组件选型"><a href="#微服务组件选型" class="headerlink" title="微服务组件选型"></a>微服务组件选型</h2><h3 id="注册中心选型"><a href="#注册中心选型" class="headerlink" title="注册中心选型"></a>注册中心选型</h3><table><thead><tr><th></th><th>Nacos</th><th>Eureka</th><th>Consul</th></tr></thead><tbody><tr><td>一致性协议</td><td>CP+AP</td><td>AP</td><td>CP</td></tr><tr><td>健康检查</td><td>TCP/HTTP/MYSQL/Client Beat</td><td>Client Beat</td><td>HTTP/gRPC/TCP</td></tr><tr><td>负载均衡策略</td><td>权重</td><td>Ribbon</td><td>Fabio</td></tr><tr><td>雪崩保护</td><td>有</td><td>有</td><td>无</td></tr><tr><td>自动注销实例</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>集群</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>SpringCloud集成</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Dubbo集成</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>K8s集成</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>备注</td><td>阿里开源产品，JAVA语言开发，持续维护</td><td>SpringCloud Netffix组件，java语言开发Eureka2.0不在维护</td><td>国外HashiCorp公司，GO语言开发，持续维护</td></tr></tbody></table><h3 id="负载均衡组件选型"><a href="#负载均衡组件选型" class="headerlink" title="负载均衡组件选型"></a>负载均衡组件选型</h3><table><thead><tr><th></th><th>Ribbon</th><th>Springcloud load balancer</th><th>Nginx</th></tr></thead><tbody><tr><td>负载方式</td><td>客户端负载</td><td>客户端负载</td><td>服务端负载</td></tr><tr><td>原理</td><td>每个客户端维护访问的服务清单</td><td>每个客户端维护访问的服务清单</td><td>服务端维护一个可用服务清单</td></tr><tr><td>使用方式</td><td>客户端配置负载均衡策略：权重、随机、轮询、自定义规则</td><td>客户端配置负载均衡策略：权重、随机、轮询、自定义规则</td><td>服务端配置规则</td></tr><tr><td>备注</td><td>Netffix开源产品,进入维护状态</td><td>SpringCloud2020.0.x版本后开发的新负载均衡器</td><td>传统的服务的负载均衡组件</td></tr></tbody></table><h3 id="服务网关选型"><a href="#服务网关选型" class="headerlink" title="服务网关选型"></a>服务网关选型</h3><table><thead><tr><th></th><th>Zuul</th><th>SpringCloud Gateway</th><th>Kong</th></tr></thead><tbody><tr><td>开发语言</td><td>JAVA</td><td>JAVA</td><td>Lua</td></tr><tr><td>使用方式</td><td>自己开发Filter</td><td>自己开发Filter</td><td>插件</td></tr><tr><td>界面管理</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>协议</td><td>HTTP/HTTPS</td><td>HTTP/HTTPS/WEBSOCKET</td><td>HTTP/HTTPS/WEBSOCKET</td></tr><tr><td>功能</td><td>限流、动态路由、灰度发布、日志等功能自己开发</td><td>限流、动态路由、灰度发布、日志等功能自己开发</td><td>插件+自定义规则开发</td></tr><tr><td>备注</td><td>Nettfix组件，Zuul1.0基于Serlvet,Zuul2.0支持异步</td><td>SpringCloud组件，Webflux异步</td><td>OpenRestry+Lua二次开发</td></tr></tbody></table><h2 id="配置中心选型"><a href="#配置中心选型" class="headerlink" title="配置中心选型"></a>配置中心选型</h2><table><thead><tr><th></th><th>SpringCloud Config</th><th>Apollo</th><th>Nacos</th></tr></thead><tbody><tr><td>开发语言</td><td>JAVA</td><td>JAVA</td><td>JAVA</td></tr><tr><td>存储方式</td><td>GIT仓库\MYSQL</td><td>MYSQL</td><td>MYSQL</td></tr><tr><td>版本管理</td><td>GIT</td><td>自动管理</td><td>自动管理</td></tr><tr><td>推送机制</td><td>SpringCloud BUS</td><td>HTTP长轮询</td><td>HTTP长轮询</td></tr><tr><td>权限管理</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>备注</td><td>SpringCloud全家桶组件</td><td>携程开源，功能非常丰富权限管理、命名空间、多语言。集群部署可整合现有Eureka</td><td>阿里开源，功能较简单，但是本身带注册中心功能。</td></tr></tbody></table><h3 id="熔断组件选型"><a href="#熔断组件选型" class="headerlink" title="熔断组件选型"></a>熔断组件选型</h3><table><thead><tr><th></th><th>SpringCloud Alibaba Sentinel</th><th>Hystrix</th><th>SpringCloud Resilience4j</th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离（并发控制）</td><td>线程池隔离/信号量隔离</td><td>信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于慢调用比例、异常比例、异常数</td><td>基于异常比例</td><td>基于异常比例、响应时间</td></tr><tr><td>实时统计实现</td><td>滑动窗口（LeapArray）</td><td>滑动窗口（基于 RxJava）</td><td>Ring Bit Buffer</td></tr><tr><td>动态规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td><td>有限支持</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td><td>Rate Limiter</td></tr><tr><td>流量整形</td><td>支持预热模式与匀速排队控制效果</td><td>不支持</td><td>简单的 Rate Limiter 模式</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>多语言支持</td><td>Java/Go/C++</td><td>Java</td><td>Java</td></tr><tr><td>Service Mesh 支持</td><td>支持 Envoy/Istio</td><td>不支持</td><td>不支持</td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配置规则、实时监控、机器发现等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td></tr></tbody></table><h3 id="服务调用链路追踪组件选型"><a href="#服务调用链路追踪组件选型" class="headerlink" title="服务调用链路追踪组件选型"></a>服务调用链路追踪组件选型</h3><table><thead><tr><th></th><th>Zipkin</th><th>CAT</th><th>Skywalking</th></tr></thead><tbody><tr><td>OpenTracing 兼容</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>开发语言</td><td>JAVA</td><td>JAVA</td><td>JAVA</td></tr><tr><td>侵入性</td><td>高</td><td>高</td><td>低</td></tr><tr><td>WebUI丰富度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>监控报警</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>备注</td><td>SpringCloud全家桶组件</td><td>美团开源</td><td>Apache</td></tr></tbody></table><h2 id="微服务架构图"><a href="#微服务架构图" class="headerlink" title="微服务架构图"></a>微服务架构图</h2><p>图片来源互联网：<a href="https://www.owensun.com/microservice-refercence-architecture/">https://www.owensun.com/microservice-refercence-architecture/</a></p><p><a href="/img/microservice-channge.png" title="img" class="gallery-item" style="box-shadow: none;"> <img src="/img/microservice-channge.png" alt="img"></a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li>[1] <a href="https://martinfowler.com/articles/microservices.html">微服务理论</a></li><li>[2] <a href="https://zh.wikipedia.org/zh-hans/%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B">康威法则</a></li></ul></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;h2 id=&quot;微服务理论基础-康威法则&quot;&gt;&lt;a href=&quot;#微服务理论基础-康威法则&quot; class=&quot;headerlink&quot; title=&quot;微服务理论基础-康威法则&quot;&gt;&lt;/a&gt;微服务理论基础-康威法则&lt;/h2&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springcloud" scheme="https://mytianya.github.io/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>Springboot2.x基础教程：自动装配原理与条件注解</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%B3%A8%E8%A7%A3/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86%E4%B8%8E%E6%9D%A1%E4%BB%B6%E6%B3%A8%E8%A7%A3/</id>
    <published>2023-09-24T18:01:08.000Z</published>
    <updated>2024-02-27T06:59:45.014Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>spring Boot采用约定优于配置的方式，大量的减少了配置文件的使用。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。<br>当springboot启动的时候，默认在容器中注入许多AutoCongfigution类。在我们加入spring-boot-stareter-xx时，XXXAutoConfiguration类根据对应的条件，自动选择装配对应的Bean实例注入IOC容器中。</p></blockquote><h2 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h2><ol><li>SpringBoot启动的时候加载主配置类，开启了自动配置功能@EnableAutoConfiguration</li><li>@EnableAutoConfiguration Import的AutoConfigurationImportSelector中代码最终调用SpringFactoriesLoader.loadSpringFactories扫描了Jar包的META-INF/spring.factories文件加载了大量的XXAutoConfiguration类</li><li>AutoConfiguration类配合Conditonal注解与ConfigurationProperties配置类在特定条件下自动装配我们需要的Bean到IOC容器中。</li></ol><h2 id="注入AutoConfiguration类核心源码分析"><a href="#注入AutoConfiguration类核心源码分析" class="headerlink" title="注入AutoConfiguration类核心源码分析"></a>注入AutoConfiguration类核心源码分析</h2><p>SpringBoot的主启动类上需要加入@SpringBootApplication注解，我们看看该注解的源码。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication {</span><br><span class="line"><span class="comment">//...省略</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实际是@EnableAutoConfigurtaion注解起作用。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration {</span><br><span class="line"><span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line">Class&lt;?&gt;[] exclude() <span class="keyword">default</span> {};</span><br><span class="line">String[] excludeName() <span class="keyword">default</span> {};</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看到@Import注解是不是很熟悉，该注解作用见教程@Enable原理，主要能够导入下面3种情况中的Bean。</p><ol><li>允许注入使用@Configuration注解的类</li><li>允许使用实现ImportSelectorj接口的类,注入selectImports返回的类</li><li>允许是实现了ImportBeanDefinitionRegistrar接口的类</li></ol><p>AutoConfigurationImportSelector中selectImports源码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) {</span><br><span class="line"><span class="keyword">if</span> (!isEnabled(annotationMetadata)) {</span><br><span class="line"><span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">}</span><br><span class="line"><span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line"><span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中<strong>AutoConfigurationImportSelector.getAutoConfigurationEntry</strong>调用<strong>AutoConfigurationImportSelector.getCandidateConfigurations</strong>调用<strong>SpringFactoriesLoader.loadFactoryNames</strong>调用<strong>SpringFactoriesLoader.loadSpringFactories</strong>。</p><p>其中<strong>SpringFactoriesLoader.loadSpringFactories</strong>从指定的配置文件META-INF/spring.factories加载配置。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span> {</span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader != <span class="literal">null</span> ? classLoader.getResources(<span class="string">"META-INF/spring.factories"</span>) : ClassLoader.getSystemResources(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">            <span class="type">LinkedMultiValueMap</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(urls.hasMoreElements()) {</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> (URL)urls.nextElement();</span><br><span class="line">                <span class="type">UrlResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(url);</span><br><span class="line">                <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">                <span class="type">Iterator</span> <span class="variable">var6</span> <span class="operator">=</span> properties.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var6.hasNext()) {</span><br><span class="line">                    Entry&lt;?, ?&gt; entry = (Entry)var6.next();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">factoryTypeName</span> <span class="operator">=</span> ((String)entry.getKey()).trim();</span><br><span class="line">                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());</span><br><span class="line">                    <span class="type">int</span> <span class="variable">var10</span> <span class="operator">=</span> var9.length;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var11</span> <span class="operator">=</span> <span class="number">0</span>; var11 &lt; var10; ++var11) {</span><br><span class="line">                        <span class="type">String</span> <span class="variable">factoryImplementationName</span> <span class="operator">=</span> var9[var11];</span><br><span class="line">                        result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            cache.put(classLoader, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        } <span class="keyword">catch</span> (IOException var13) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"Unable to load factories from location [META-INF/spring.factories]"</span>, var13);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>总结：</p><ol><li>@SpringBootApplication中@EnableAutoConfiguration注解最终调用SpringFactoriesLoader.loadSpringFactories，从classpath中搜寻所有的META-INF/spring.factories配置文件</li><li>并将其中org.springframework.boot.autoconfigure.EnableutoConfiguration对应的配置项通过反射实例化为对应的标注了@Configuration的JavaConfig形式的IoC容器配置类，然后汇总为一个并加载到IoC容器。</li></ol><h2 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h2><p>在spring-boot-autoconfigure包在META-INF/spring.factories文件中autoconfiguration配置项一览。</p><p><a href="https://pan.codehome.vip/images/iuCdkPvFtxMyO2B.png" title="image-20200909232847766" class="gallery-item" style="box-shadow: none;"> <img src="https://pan.codehome.vip/images/iuCdkPvFtxMyO2B.png" alt="image-20200909232847766"></a></p><p>我们拿DataSourceAutoConfiguration源码分析，看看autoconfiguration类生效的条件。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class })</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(type = "io.r2dbc.spi.ConnectionFactory")</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(DataSourceProperties.class)</span></span><br><span class="line"><span class="meta">@Import({ DataSourcePoolMetadataProvidersConfiguration.class, DataSourceInitializationConfiguration.class })</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceAutoConfiguration</span> {</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Conditional(EmbeddedDatabaseCondition.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean({ DataSource.class, XADataSource.class })</span></span><br><span class="line"><span class="meta">@Import(EmbeddedDataSourceConfiguration.class)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmbeddedDatabaseConfiguration</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Conditional(PooledDataSourceCondition.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean({ DataSource.class, XADataSource.class })</span></span><br><span class="line"><span class="meta">@Import({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span></span><br><span class="line"><span class="meta">DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,</span></span><br><span class="line"><span class="meta">DataSourceJmxConfiguration.class })</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PooledDataSourceConfiguration</span> {</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">//省略....</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在DataSourceAutoConfiguration类中，存在大量的@ConditionalXX条件注解，常见条件注解作用：</p><ol><li>@ConditionalOnBean：当SpringIoc容器内存在指定Bean的条件</li><li>@ConditionalOnClass：当SpringIoc容器内存在指定Class的条件</li><li>@ConditionalOnExpression：基于SpEL表达式作为判断条件</li><li>@ConditionalOnJava：基于JVM版本作为判断条件</li><li>@ConditionalOnJndi：在JNDI存在时查找指定的位置</li><li>@ConditionalOnMissingBean：当SpringIoc容器内不存在指定Bean的条件</li><li>@ConditionalOnMissingClass：当SpringIoc容器内不存在指定Class的条件</li><li>@ConditionalOnNotWebApplication：当前项目不是Web项目的条件</li><li>@ConditionalOnProperty：指定的属性是否有指定的值</li><li>@ConditionalOnResource：类路径是否有指定的值</li><li>@ConditionalOnSingleCandidate：当指定Bean在SpringIoc容器内只有一个，或者虽然有多个但是指定首选的Bean</li><li>@ConditionalOnWebApplication：当前项目是Web项目的条件</li><li>@EnableConfigurationProperties注解：使使用 @ConfigurationProperties 注解的类生效。<br>我们可以看在DataSourceAutoConfiguration激活了DataSourceProperties配置，并且根据条件注解在不同情况下加载不同的数据源到IOC容器中。</li></ol><p><strong>千里之行，始于足下。这里是SpringBoot教程系列第十七篇，所有项目源码均可以在我的<a href="https://github.com/mytianya/springboot-tutorials" title="GitHub">GitHub</a>上面下载源码。觉得不错可以评论、点赞、转发3连。</strong></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;spring Boot采用约定优于配置的方式，大量的减少了配置文件的使用。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。&lt;br&gt;当springboot启动的时候</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot项目打包瘦身</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/springboot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E7%98%A6%E8%BA%AB/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/springboot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E7%98%A6%E8%BA%AB/</id>
    <published>2023-09-24T18:00:58.000Z</published>
    <updated>2024-02-27T06:59:45.016Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>  默认情况下，<strong>Spring Boot</strong> 项目发布时会将项目代码和项目的所有依赖文件一起打成一个可执行的 <strong>jar</strong> 包。但如果项目的依赖包很多，那么这个文件就会非常大。这样每次即使只改动一点东西，就需要将整个项目重新打包部署，我们将依赖 <strong>lib</strong> 从项目分离出来，这样每次部署只需要发布项目源码即可。</p></blockquote><h2 id="瘦身打包配置"><a href="#瘦身打包配置" class="headerlink" title="瘦身打包配置"></a>瘦身打包配置</h2><p>springboot默认使用<strong>spring-boot-maven-plugin</strong> 来打包，这个插件会将项目所有的依赖打入项目<strong>jar</strong> 包里面，将打包插件替换为 <strong>maven-jar-plugin</strong>，并拷贝依赖到 <strong>jar</strong> 到外面的 <strong>lib</strong> 目录。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定启动类，将依赖打成外部jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 生成的jar中，不要包含pom.xml和pom.properties这两个文件 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 是否要把第三方jar加入到类构建路径 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 外部依赖jar包的最终位置 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 项目启动类 --&gt;</span>                       <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>vip.codehome.springboot.tutorials.SpringbootTutorialsApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拷贝依赖到jar外面的lib目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-lib<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludeTransitive</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeTransitive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">stripVersion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">stripVersion</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includeScope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">includeScope</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​项目打包时会在target目录生成lib依赖包跟项目jar包，部署时将项目 <strong>jar</strong> 包以及 <strong>lib</strong> 文件夹上传到服务器上，使用java -jar 命令启动即可。如果后续仅仅修改了项目代码，只需上传替换项目 <strong>jar</strong> 包。</p><p><a href="/img/spring-package.png" title="spring-package" class="gallery-item" style="box-shadow: none;"> <img src="/img/spring-package.png" alt="spring-package"></a></p><p><strong>千里之行，始于足下。这里是SpringBoot教程系列第十八篇，所有项目源码均可以在我的<a href="https://github.com/mytianya/springboot-tutorials" title="GitHub">GitHub</a>上面下载源码。</strong></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;  默认情况下，&lt;strong&gt;Spring Boot&lt;/strong&gt; 项目发布时会将项目代码和项目的所有依赖文件一起打成一个可执行的 &lt;strong&gt;jar&lt;/strong&gt; 包。但如</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.x基础教程：连接池配置</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/SpringBoot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E8%BF%9E%E6%8E%A5%E6%B1%A0%E9%85%8D%E7%BD%AE/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/SpringBoot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E8%BF%9E%E6%8E%A5%E6%B1%A0%E9%85%8D%E7%BD%AE/</id>
    <published>2023-09-24T18:00:48.000Z</published>
    <updated>2024-02-27T06:59:45.011Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><h2 id="HikariCP"><a href="#HikariCP" class="headerlink" title="HikariCP"></a>HikariCP</h2><h2 id="连接池基本配置"><a href="#连接池基本配置" class="headerlink" title="连接池基本配置"></a>连接池基本配置</h2><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据源驱动名称</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">#连接池类型</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="comment">#数据源地址</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="comment">#数据源连接名</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#数据源地址</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure><h2 id="HikariCP配置"><a href="#HikariCP配置" class="headerlink" title="HikariCP配置"></a>HikariCP配置</h2><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最小空闲连接</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.mininum-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#最大连接数</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.maximun-pool-size</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#空闲超时时间，这个属性用来控制空闲连接允许保留在连接池中的最大时间，这个属性只有在minimumIdle（最小空闲连接数）小于maximumPoolSize(最大连接数)时才会生效,空闲连接断开会有15s-30s的延迟变动时间.在这个超时时间之前空闲连接永远不会断开,当连接池达到minimumIdle,连接将永远不会断开，即使处于闲置状态.值为0表示空闲连接将永远不会从连接池中移除，最小值为10000ms （10s),默认值为600000(10min)</span></span><br><span class="line"><span class="attr">spring.datasource.idle-timeout</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment">#最大生命周期.这个属性用来控制连接池中连接的最大生命周期,一个使用中的连接永远不会被断开,只有当它处于关闭状态然后才会被移除.推荐设置比任何数据库或基础设施规定的连接时间限制少至少30秒。 值为0表示没有最大寿命（无限寿命）， 默认：1800000（30分钟）,由于HikariCP的housekeeper默认每30s运行一次,以维护minimumIdle最小空闲连接数，它可能添加新连接或者断开空闲连接，所以你必须设置maxLifetime属性比（mysql)wait_timeout时间少一些来避免 broken connection / exceptions.意思就是说比如mysql wait_timeout为10min,此时有一个连接由于达到超时时间，mysql主动断开了连接，而HakariCP仍然持有此连接，如果再使用此连接去请求数据库则会发生异常,设置maxLifetime最大生命周期比wait_timeout少30s后,就能确保再housekeeper运行期间提前断开此连接，避免发生异常.</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.max-lifetime</span>=<span class="string">600000</span></span><br><span class="line"><span class="comment">#连接池名称</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.poolName</span>=<span class="string">CDHikariPool</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Druid配置"><a href="#Druid配置" class="headerlink" title="Druid配置"></a>Druid配置</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">oracle.jdbc.OracleDriver</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:oracle:thin:@192.28.4.21:1521:fdp1</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">imf</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ca2804</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">      <span class="comment"># 通过 connectProperties 属性来打开 mergeSql 功能；慢 SQL 记录</span></span><br><span class="line">      <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment">#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">100</span></span><br><span class="line">      <span class="comment">#测试连接</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">select</span> <span class="string">'x'</span> <span class="string">from</span> <span class="string">dual</span></span><br><span class="line">      <span class="attr">validation-query-timeout:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment">#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">"/*"</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">"/druid/*"</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">atc</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">atc4</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Druid监控页面"><a href="#Druid监控页面" class="headerlink" title="Druid监控页面"></a>Druid监控页面</h3><p>浏览器访问应用地址http://<ip>:<port>/druid/login.html即可以访问监控页面。</port></ip></p><p><a href="/img/druid-monitor.png" title="image-20210706162306080" class="gallery-item" style="box-shadow: none;"> <img src="/img/druid-monitor.png" alt="image-20210706162306080"></a></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;h2 id=&quot;HikariCP&quot;&gt;&lt;a href=&quot;#HikariCP&quot; class=&quot;headerlink&quot; title=&quot;HikariCP&quot;&gt;&lt;/a&gt;HikariCP&lt;/h2&gt;&lt;h2 id=&quot;连接池基本配置&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot2.x基础教程：SpringBoot集成Quartz</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/SpringBoot%E9%9B%86%E6%88%90Quartz/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/SpringBoot%E9%9B%86%E6%88%90Quartz/</id>
    <published>2023-09-24T18:00:38.000Z</published>
    <updated>2024-02-27T06:59:45.012Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Quartz配置"><a href="#Quartz配置" class="headerlink" title="Quartz配置"></a>Quartz配置</h2><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">org:</span></span><br><span class="line">        <span class="attr">quartz:</span></span><br><span class="line">          <span class="attr">scheduler:</span></span><br><span class="line">            <span class="attr">instanceName:</span> <span class="string">clusteredScheduler</span> <span class="comment">#调度器实例名称</span></span><br><span class="line">            <span class="attr">instanceId:</span> <span class="string">AUTO</span> <span class="comment">#调度器实例编号自动生成</span></span><br><span class="line">          <span class="attr">jobStore:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span> <span class="comment">#持久化方式配置</span></span><br><span class="line">            <span class="attr">driverDelegateClass:</span> <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span> <span class="comment">#持久化方式配置数据驱动，MySQL数据库</span></span><br><span class="line">            <span class="attr">tablePrefix:</span> <span class="string">qrtz_</span> <span class="comment">#quartz相关数据表前缀名</span></span><br><span class="line">            <span class="attr">isClustered:</span> <span class="literal">true</span> <span class="comment">#开启分布式部署</span></span><br><span class="line">            <span class="attr">clusterCheckinInterval:</span> <span class="number">10000</span> <span class="comment">#分布式节点有效性检查时间间隔，单位：毫秒</span></span><br><span class="line">            <span class="attr">useProperties:</span> <span class="literal">false</span> <span class="comment">#配置是否使用</span></span><br><span class="line">          <span class="attr">threadPool:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span> <span class="comment">#线程池实现类</span></span><br><span class="line">            <span class="attr">threadCount:</span> <span class="number">10</span> <span class="comment">#执行最大并发线程数量</span></span><br><span class="line">            <span class="attr">threadPriority:</span> <span class="number">5</span> <span class="comment">#线程优先级</span></span><br><span class="line">            <span class="attr">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class="literal">true</span> <span class="comment">#配置是否启动自动加载数据库内的定时任务，默认true</span></span><br><span class="line">    <span class="attr">job-store-type:</span> <span class="string">jdbc</span></span><br><span class="line">    <span class="attr">overwrite-existing-jobs:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Quartz-SpringBoot使用"><a href="#Quartz-SpringBoot使用" class="headerlink" title="Quartz SpringBoot使用"></a>Quartz SpringBoot使用</h2><p>​DataCheckJob继承 Job重写execute方法，这里**与springboot2.x集成,需要注入DataMapper Bean,直接使用@Autowired强制注入,或者使用构造函数注入即可，其他低版本的则会出现bean注入不了的情况。需要自己实现AdaptableJobFactory注入bean **</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataCheckJob</span> <span class="keyword">implements</span> <span class="title class_">QuartzJobBean</span> {</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  DataMapper dataMapper;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException {</span><br><span class="line">    dataMapper.check();</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>配置DataCheckJob与任务的触发器。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobConfig</span> {</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> JobDetail <span class="title function_">dataCheckJobDetail</span><span class="params">()</span>{</span><br><span class="line">    <span class="keyword">return</span> JobBuilder.newJob(DataCheckJob.class).storeDurably().build();</span><br><span class="line">  }</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> Trigger <span class="title function_">dataCheckTrigger</span><span class="params">()</span>{</span><br><span class="line">    <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(dataCheckJobDetail()).withIdentity(<span class="string">"DataCheckJob"</span>)</span><br><span class="line">        .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">"0 37 11 ? * *"</span>)).build();</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Quartz表说明"><a href="#Quartz表说明" class="headerlink" title="Quartz表说明"></a>Quartz表说明</h2><h3 id="qrtz-blob-triggers"><a href="#qrtz-blob-triggers" class="headerlink" title="qrtz_blob_triggers"></a>qrtz_blob_triggers</h3><p>​自定义的triggers使用blog类型进行存储，非自定义的triggers不会存放在此表中，Quartz提供的triggers包括：CronTrigger，CalendarIntervalTrigger，<br>DailyTimeIntervalTrigger以及SimpleTrigger，这几个trigger信息会保存在后面的几张表中；</p><h3 id="qrtz-cron-triggers"><a href="#qrtz-cron-triggers" class="headerlink" title="qrtz_cron_triggers"></a>qrtz_cron_triggers</h3><p>存放CronTrigger类型的触发器实例</p><p><a href="/img/qrtz_cron_triggers.png" title="qrtz_cron_triggers" class="gallery-item" style="box-shadow: none;"> <img src="/img/qrtz_cron_triggers.png" alt="qrtz_cron_triggers"></a></p><h2 id="qrtz-simple-triggers"><a href="#qrtz-simple-triggers" class="headerlink" title="qrtz_simple_triggers"></a>qrtz_simple_triggers</h2><p>存储SimpleTrigger</p><h3 id="qrtz-simprop-triggers"><a href="#qrtz-simprop-triggers" class="headerlink" title="qrtz_simprop_triggers"></a>qrtz_simprop_triggers</h3><p>存储CalendarIntervalTrigger和DailyTimeIntervalTrigger两种类型的触发器</p><h3 id="qrtz-fired-triggers"><a href="#qrtz-fired-triggers" class="headerlink" title="qrtz_fired_triggers"></a>qrtz_fired_triggers</h3><p>​存储已经触发的trigger相关信息，trigger随着时间的推移状态发生变化，直到最后trigger执行完成，从表中被删除。</p><p>相同的trigger和task，每触发一次都会创建一个实例；从刚被创建的ACQUIRED状态，到EXECUTING状态，最后执行完从数据库中删除。</p><p><a href="/img/qrtz_fired_triggers.png" title="qrtz_fired_triggers" class="gallery-item" style="box-shadow: none;"> <img src="/img/qrtz_fired_triggers.png" alt="qrtz_fired_triggers"></a></p><h3 id="qrtz-triggers"><a href="#qrtz-triggers" class="headerlink" title="qrtz_triggers"></a>qrtz_triggers</h3><p>存储定义的trigger，和qrtz_fired_triggers存放的不一样，不管trigger触发了多少次都只有一条记录，TRIGGER_STATE用来标识当前trigger的状态</p><p><a href="/img/qrtz_triggers.png" title="qrtz_triggers" class="gallery-item" style="box-shadow: none;"> <img src="/img/qrtz_triggers.png" alt="qrtz_triggers"></a></p><h3 id="qrtz-job-details"><a href="#qrtz-job-details" class="headerlink" title="qrtz_job_details"></a>qrtz_job_details</h3><p>存储jobDetails信息，相关信息在定义的时候指定。</p><p><a href="/img/qrtz_job_details.png" class="gallery-item" style="box-shadow: none;"> <img src="/img/qrtz_job_details.png"></a></p><h3 id="qrtz-calendars"><a href="#qrtz-calendars" class="headerlink" title="qrtz_calendars"></a>qrtz_calendars</h3><p>​Quartz为我们提供了日历的功能，可以自己定义一个时间段，可以控制触发器在这个时间段内触发或者不触发；现在提供6种类型：AnnualCalendar，CronCalendar，DailyCalendar，HolidayCalendar，MonthlyCalendar，WeeklyCalendar；</p><h3 id="qrtz-paused-trigger-grps"><a href="#qrtz-paused-trigger-grps" class="headerlink" title="qrtz_paused_trigger_grps"></a>qrtz_paused_trigger_grps</h3><p>存放暂停的触发器</p><h3 id="qrtz-scheduler-state"><a href="#qrtz-scheduler-state" class="headerlink" title="qrtz_scheduler_state"></a>qrtz_scheduler_state</h3><p>存储所有节点的scheduler，会定期检查scheduler是否失效，启动多个scheduler。</p><p><a href="/img/qrtz_scheduler_state.png" class="gallery-item" style="box-shadow: none;"> <img src="/img/qrtz_scheduler_state.png"></a></p><h3 id="qrtz-locks"><a href="#qrtz-locks" class="headerlink" title="qrtz_locks"></a>qrtz_locks</h3><p>Quartz提供的锁表，为多个节点调度提供分布式锁，实现分布式调度，默认有2个锁。</p><p>​/img/<br>​TRIGGER_ACCESS主要用在TRIGGER被调度的时候，保证只有一个节点去执行调度；</p><h2 id="Quartz表手动生成"><a href="#Quartz表手动生成" class="headerlink" title="Quartz表手动生成"></a>Quartz表手动生成</h2><p>实际在使用Quartz过程中数据库中的表通常因为权限不能够自动生成，通常配置initialize-schema为never。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.quartz.jdbc.initialize-schema</span>=<span class="string">never|always</span></span><br></pre></td></tr></tbody></table></figure><p>在quartz的jar的org/quartz/impl/jdbcjobstore包中有对应各种关系数据库的数据库生成脚本。有时候默认的quartz-sql对于最新的数据库，比如oracle19c不能很好兼容，需要我们自己修改对应SQL语句。</p><p><a href="/img/quartz-table.png" title="quartz-table" class="gallery-item" style="box-shadow: none;"> <img src="/img/quartz-table.png" alt="quartz-table"></a></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;h2 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; title=&quot;引入依赖&quot;&gt;&lt;/a&gt;引入依赖&lt;/h2&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;tabl</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot通过proguard-maven-plugin插件进行实际项目代码混淆，实测可用</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/SpringBoot%E9%80%9A%E8%BF%87proguard-maven-plugin%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%EF%BC%8C%E5%AE%9E%E6%B5%8B%E5%8F%AF%E7%94%A8/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/SpringBoot%E9%80%9A%E8%BF%87proguard-maven-plugin%E6%8F%92%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%EF%BC%8C%E5%AE%9E%E6%B5%8B%E5%8F%AF%E7%94%A8/</id>
    <published>2023-09-24T18:00:20.000Z</published>
    <updated>2024-02-27T06:59:45.011Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>本文主要研究下如何使用proguard-maven-plugin插件混淆springboot代码。工程代码是实际跑在线上的Springboot2.x项目，踩过N个坑，最后实测成功。</p></blockquote><h2 id="先说贴出成功的配置"><a href="#先说贴出成功的配置" class="headerlink" title="先说贴出成功的配置"></a>先说贴出成功的配置</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>${basedir}/src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>${basedir}/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/application-*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--代码混淆--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.wvengen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>proguard-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;<span class="name">goal</span>&gt;</span>proguard<span class="tag">&lt;/<span class="name">goal</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">proguardVersion</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">proguardVersion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">injar</span>&gt;</span>${project.build.finalName}.jar<span class="tag">&lt;/<span class="name">injar</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;injar&gt;classes&lt;/injar&gt; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outjar</span>&gt;</span>${project.build.finalName}.jar<span class="tag">&lt;/<span class="name">outjar</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">obfuscate</span>&gt;</span>true<span class="tag">&lt;/<span class="name">obfuscate</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">options</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--  ##默认是开启的，这里关闭shrink，即不删除没有使用的类/成员--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-dontshrink<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- ##默认是开启的，这里关闭字节码级别的优化--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-dontoptimize<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--##对于类成员的命名的混淆采取唯一策略--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-useuniqueclassmembernames<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--- 混淆类名之后，对使用Class.forName('className')之类的地方进行相应替代--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-adaptclassstrings <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-ignorewarnings<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 混淆时不生成大小写混合的类名，默认是可以大小写混合--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-dontusemixedcaseclassnames<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- This option will replace all strings in reflections method invocations with new class names.</span></span><br><span class="line"><span class="comment">                         For example, invokes Class.forName('className')--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- &lt;option&gt;-adaptclassstrings&lt;/option&gt; --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- This option will save all original annotations and etc. Otherwise all we be removed from files.--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 不混淆所有特殊的类--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,</span><br><span class="line">                        SourceFile,LineNumberTable,*Annotation*,EnclosingMethod<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- This option will save all original names in interfaces (without obfuscate).--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keepnames interface **<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- This option will save all original methods parameters in files defined in -keep sections,</span></span><br><span class="line"><span class="comment">                         otherwise all parameter names will be obfuscate.--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keepparameternames<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- &lt;option&gt;-libraryjars **&lt;/option&gt; --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- This option will save all original class files (without obfuscate) but obfuscate all in domain package.--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&lt;option&gt;-keep class !com.slm.proguard.example.spring.boot.domain.** { *; }&lt;/option&gt;--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keep class !com.dsys.project.** { *; }<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keep class com.dsys.project.App { *; }<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keep class com.dsys.project.config.** { *; }<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--保留不然Mybatis报错--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keep class com.dsys.project.entity.** { *; }<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keep class com.dsys.project.utils.PageRes { *; }<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keep class com.dsys.project.controller.** { *; }<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keep class com.dsys.project.mp.controller.** { *; }<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keep class com.dsys.project.mp.config.** { *; }<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keep class com.dsys.project.dto.** { *; }<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keep class * implements java.io.Serializable <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- This option will save all original class files (without obfuscate) in service package--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&lt;option&gt;-keep class com.slm.proguard.example.spring.boot.service { *; }&lt;/option&gt;--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- This option will save all original interfaces files (without obfuscate) in all packages.--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keep interface * extends * { *; }<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- &lt;option&gt;-keep @org.springframework.stereotype.Service class *&lt;/option&gt; --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- This option will save all original defined annotations in all class in all packages.--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>-keepclassmembers class * {</span><br><span class="line">                        <span class="comment">&lt;!-- @org.springframework.beans.factory.annotation.Autowired *; --&gt;</span></span><br><span class="line">                        @org.springframework.beans.factory.annotation.Value *;</span><br><span class="line">                        }</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">libs</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Include main JAVA library required.--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lib</span>&gt;</span>${java.home}/lib/rt.jar<span class="tag">&lt;/<span class="name">lib</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">libs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.proguard<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>proguard-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- &lt;phase&gt;none&lt;/phase&gt; --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.dsys.project.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="主要的坑-springboot项目配置注意项"><a href="#主要的坑-springboot项目配置注意项" class="headerlink" title="主要的坑,springboot项目配置注意项"></a>主要的坑,springboot项目配置注意项</h2><h3 id="启动类不能混淆"><a href="#启动类不能混淆" class="headerlink" title="启动类不能混淆"></a>启动类不能混淆</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//混淆会把Bean的名称重复，这里要求SpringBoot生成唯一的BeanName</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan("com.dsys.project.dao")</span></span><br><span class="line"><span class="meta">@ComponentScan("com.dsys")</span></span><br><span class="line"><span class="meta">@ServletComponentScan("com.dsys")</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CustomGenerator</span> <span class="keyword">implements</span> <span class="title class_">BeanNameGenerator</span> {</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">generateBeanName</span><span class="params">(BeanDefinition definition, BeanDefinitionRegistry registry)</span> {</span><br><span class="line">            <span class="keyword">return</span> definition.getBeanClassName();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 由于proguard混淆貌似不能指定在basePackages下面类名混淆后唯一，不同包名经常有a.class，b.class,c.class之类重复的类名，因此spring容器初始化bean的时候会报错。</span></span><br><span class="line"><span class="comment">     *庆幸的是，我们可以通过改变spring的bean的命名策略来解决这个问题，把包名带上，就唯一了</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(App.class)</span><br><span class="line">                .beanNameGenerator(<span class="keyword">new</span> <span class="title class_">CustomGenerator</span>())</span><br><span class="line">                .run(args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="实体类一定要保留"><a href="#实体类一定要保留" class="headerlink" title="实体类一定要保留"></a>实体类一定要保留</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解释：这里的实体类包括各种Entity,Dto等。保留的原因有：</span><br><span class="line">1. Mybatis的XML的ResultType需要实体类的全路径</span><br><span class="line">2. Jackson需要序列化，字段混淆前端会找不到</span><br></pre></td></tr></tbody></table></figure><h3 id="Controller一定要保留"><a href="#Controller一定要保留" class="headerlink" title="Controller一定要保留"></a>Controller一定要保留</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解释：Controller混淆了前端找不到请求路径，模板引擎例如thymeleaf找不到路径</span><br></pre></td></tr></tbody></table></figure><h3 id="SpringBoot-JavaConfig配置不能混淆"><a href="#SpringBoot-JavaConfig配置不能混淆" class="headerlink" title="SpringBoot JavaConfig配置不能混淆"></a>SpringBoot JavaConfig配置不能混淆</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解释：例如下面的JavaConfig配置，混淆后配置出错</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "wx.mp")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxMpProperties</span> {</span><br><span class="line">    <span class="keyword">private</span> List&lt;MpConfig&gt; configs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MpConfig</span> {</span><br><span class="line">        <span class="keyword">private</span> String appId;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>其他配置参考以上的注释，其他照抄修改成自己的项目对应路径即可，使用JD-GUI反编译查看效果。</strong></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;本文主要研究下如何使用proguard-maven-plugin插件混淆springboot代码。工程代码是实际跑在线上的Springboot2.x项目，踩过N个坑，最后实测成功。&lt;/p&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>贡献一个springboot项目linux shell启动脚本</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/%E8%B4%A1%E7%8C%AE%E4%B8%80%E4%B8%AAspringboot%E9%A1%B9%E7%9B%AElinux%20shell%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/%E8%B4%A1%E7%8C%AE%E4%B8%80%E4%B8%AAspringboot%E9%A1%B9%E7%9B%AElinux%20shell%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</id>
    <published>2023-09-24T18:00:18.000Z</published>
    <updated>2024-02-27T06:59:45.016Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>springboot打好的包放在/usr/local/app目录下，如App.jar改名为mv App.jar App<br>springboot配置外提为App.yml也放在当前目录下,日志生成为App.log</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里可替换为你自己的执行程序,其他代码无需更改</span> </span><br><span class="line">APP_NAME=$1</span><br><span class="line">JAR_NAME=/usr/local/app/${APP_NAME} </span><br><span class="line">JVM="-server -Xms2048m -Xmx2048m -XX:PermSize=1024M -XX:MaxNewSize=512m -XX:MaxPermSize=2048m -Djava.awt.headless=true -XX:+CMSClassUnloadingEnabled -XX:+CMSPermGenSweepingEnabled"</span><br><span class="line">APPFILE_PATH="-Dspring.config.location=/usr/local/app/${APP_NAME}.yml </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用说明,用来提示输入参数</span> </span><br><span class="line">usage() { </span><br><span class="line">echo "Usage: sh 执行脚本.sh app_name [start|stop|restart|status]" </span><br><span class="line">exit 1 </span><br><span class="line">} </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查程序是否在运行</span> </span><br><span class="line">is_exist(){ </span><br><span class="line">pid=`ps -ef|grep java |grep $APP_NAME|grep -v grep|awk '{print $2}' ` </span><br><span class="line">echo $pid</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果不存在返回1,存在返回0</span> </span><br><span class="line">if [ -z "${pid}" ]; then </span><br><span class="line">return 1 </span><br><span class="line">else </span><br><span class="line">return 0 </span><br><span class="line">fi </span><br><span class="line">} </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动方法</span> </span><br><span class="line">start(){ </span><br><span class="line">is_exist </span><br><span class="line">if [ $? -eq "0" ]; then </span><br><span class="line">echo "${APP_NAME} is already running. pid=${pid} ." </span><br><span class="line">else </span><br><span class="line">nohup java $JVM -jar $APPFILE_PATH $JAR_NAME &gt; ${APP_NAME}.log 2&gt;&amp;1 &amp;</span><br><span class="line">fi</span><br><span class="line">} </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止方法</span> </span><br><span class="line">stop(){ </span><br><span class="line">is_exist </span><br><span class="line">if [ $? -eq "0" ]; then </span><br><span class="line">kill -9 $pid </span><br><span class="line">else </span><br><span class="line">echo "${APP_NAME} is not running" </span><br><span class="line">fi </span><br><span class="line">} </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出运行状态</span> </span><br><span class="line">status(){ </span><br><span class="line">is_exist </span><br><span class="line">if [ $? -eq "0" ]; then </span><br><span class="line">echo "${APP_NAME} is running. Pid is ${pid}" </span><br><span class="line">else </span><br><span class="line">echo "${APP_NAME} is NOT running." </span><br><span class="line">fi </span><br><span class="line">} </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启</span> </span><br><span class="line">restart(){ </span><br><span class="line">stop </span><br><span class="line">start </span><br><span class="line">} </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">根据输入参数,选择执行对应方法,不输入则执行使用说明</span> </span><br><span class="line">case "$2" in </span><br><span class="line">"start") </span><br><span class="line">start </span><br><span class="line">;; </span><br><span class="line">"stop") </span><br><span class="line">stop </span><br><span class="line">;; </span><br><span class="line">"status") </span><br><span class="line">status </span><br><span class="line">;; </span><br><span class="line">"restart") </span><br><span class="line">restart </span><br><span class="line">;; </span><br><span class="line">*) </span><br><span class="line">usage </span><br><span class="line">;; </span><br><span class="line">esac</span><br></pre></td></tr></tbody></table></figure><h2 id="开机自启，注册成Systemd系统服务"><a href="#开机自启，注册成Systemd系统服务" class="headerlink" title="开机自启，注册成Systemd系统服务"></a>开机自启，注册成Systemd系统服务</h2><p>使用root权限在linux系统的/lib/systemd/system下编辑需要启动服务如app.service</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=eureka service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/bin/java -server -Xms2048m -Xmx2048m -XX:PermSize=1024M -XX:MaxNewSize=512m -XX:MaxPermSize=2048m -Djava.awt.headless=true -XX:+CMSClassUnloadingEnabled -XX:+CMSPermGenSweepingEnabled  -Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=&lt;服务器IP&gt; -jar -Dspring.config.location=&lt;外置的配置文件地址&gt;  &lt;Jar包地址&gt;</span><br><span class="line">PrivateTmp=true</span><br><span class="line">User=&lt;启动服务的用户&gt;</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure><p>接下来要做的就是启动服务，首先重新加载systemd</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure><p>启动该服务,并查看app.service状态</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start app.service</span><br><span class="line">systemctl status app.service</span><br></pre></td></tr></tbody></table></figure><p>配置成开机自启</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable app.service</span><br><span class="line">systemctl stop app.service #关闭</span><br><span class="line">systemctl disable app.service #移除开启自启</span><br></pre></td></tr></tbody></table></figure></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;springboot打好的包放在/usr/local/app目录下，如App.jar改名为mv App.jar App&lt;br&gt;springboot配置外提为App.yml也放在当前目录下,</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Spring事务详解</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/Spring%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/Spring%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-09-24T18:00:14.000Z</published>
    <updated>2024-02-27T06:59:45.015Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>事务是逻辑上的一组操作，要么都执行，要么都不执行。</p></blockquote><h2 id="事务特性-ACID"><a href="#事务特性-ACID" class="headerlink" title="事务特性(ACID)"></a>事务特性(ACID)</h2><ul><li>Atomicity（原子性）：一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被<a href="https://zh.wikipedia.org/wiki/%E5%9B%9E%E6%BB%9A_(%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86)">回滚</a>（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。[<a href="https://zh.wikipedia.org/wiki/ACID#cite_note-acid-1">1]</a></li><li>Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7">约束</a>、<a href="https://zh.wikipedia.org/wiki/%E8%A7%A6%E5%8F%91%E5%99%A8_(%E6%95%B0%E6%8D%AE%E5%BA%93)">触发器</a>、<a href="https://zh.wikipedia.org/wiki/%E7%BA%A7%E8%81%94%E5%9B%9E%E6%BB%9A">级联回滚</a>等。[<a href="https://zh.wikipedia.org/wiki/ACID#cite_note-acid-1">1]</a></li><li>Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括未提交读（Read uncommitted）、提交读（read committed）、可重复读（repeatable read）和串行化（Serializable）。[<a href="https://zh.wikipedia.org/wiki/ACID#cite_note-acid-1">1]</a></li><li>Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><h2 id="Spring事务管理接口"><a href="#Spring事务管理接口" class="headerlink" title="Spring事务管理接口"></a>Spring事务管理接口</h2><p>​<strong>Spring并不直接管理事务，而是提供了多种事务管理器</strong> ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： <strong>org.springframework.transaction.PlatformTransactionManager</strong> ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p><p><a href="/img/PlatformTransactionManager.png" title="PlatformTransactionManager" class="gallery-item" style="box-shadow: none;"> <img src="/img/PlatformTransactionManager.png" alt="PlatformTransactionManager"></a></p><h3 id="PlatformTransactionManager核心方法"><a href="#PlatformTransactionManager核心方法" class="headerlink" title="PlatformTransactionManager核心方法"></a>PlatformTransactionManager核心方法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PlatformTransactionManager</span> <span class="keyword">extends</span> <span class="title class_">TransactionManager</span> {</span><br><span class="line"><span class="comment">//根据指定的传播行为，返回当前活动的事务或创建一个新事务</span></span><br><span class="line">TransactionStatus <span class="title function_">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition definition)</span></span><br><span class="line"><span class="keyword">throws</span> TransactionException;</span><br><span class="line"><span class="comment">//使用事务目前的状态提交事务</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line"><span class="comment">//对执行的事务进行回滚</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="TransactionDefinition事务定义"><a href="#TransactionDefinition事务定义" class="headerlink" title="TransactionDefinition事务定义"></a>TransactionDefinition事务定义</h3><ul><li>事务的传播行为</li><li>事务隔离级别</li><li>事务名称</li><li>事务超时时间</li><li>是否为<a href="https://blog.csdn.net/andyzhaojianhui/article/details/51984157">只读事务</a></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TransactionDefinition</span> {</span><br><span class="line">    <span class="comment">// 返回事务的传播行为</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getPropagationBehavior</span><span class="params">()</span>; </span><br><span class="line">    <span class="comment">// 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getIsolationLevel</span><span class="params">()</span>; </span><br><span class="line">    <span class="comment">// 返回事务必须在多少秒内完成</span></span><br><span class="line">    <span class="comment">//返回事务的名字</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>；</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getTimeout</span><span class="params">()</span>;  </span><br><span class="line">    <span class="comment">// 返回是否优化为只读事务。</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isReadOnly</span><span class="params">()</span>;</span><br><span class="line">} </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h3><p>简单的来说，多个事务方法相互调用时,事务如何在这些方法间传播。</p><blockquote><p>举个栗子，方法A是一个事务的方法，方法A执行过程中调用了方法B，那么方法B有无事务以及方法B对事务的要求不同都会对方法A的事务具体执行造成影响，同时方法A的事务对方法B的事务执行也有影响，这种影响具体是什么就由两个方法所定义的事务传播类型所决定。</p></blockquote><h5 id="支持外层事务情况"><a href="#支持外层事务情况" class="headerlink" title="支持外层事务情况"></a>支持外层事务情况</h5><ul><li>Required: 当前外层存在事务，加入当前事务。没有自己创建新一个事务。</li><li>Supports: 当前外层存在事务，加入当前事务。没有自己以非事务方式运行。</li><li>Mandatory: 当前外层存在事务，加入当前事务。没有当前事务，抛出异常。</li></ul><h4 id="不支持外层事务情况"><a href="#不支持外层事务情况" class="headerlink" title="不支持外层事务情况"></a>不支持外层事务情况</h4><ul><li>Required_NEW: 创建一个新事务，当前外层存在事务，则挂起当前事务。</li><li>Not_Supported: 以非事务方式运行。当前外层存在事务，则挂起当前事务。</li><li>Never: 以非事务方式运行。当前外层存在事务，则抛出异常。</li></ul><h4 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h4><ul><li>Nested: 当前外层存在事务，则创建一个嵌套事务作为当前事务的嵌套事务来运行。没有等于Required。</li></ul><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><p>定义了一个事务可能受其他并发事务影响的程度。</p><p><strong>TransactionDefinition.ISOLATION_DEFAULT:</strong>使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.</p><p><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED:</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></p><p><strong>TransactionDefinition.ISOLATION_READ_COMMITTED:</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></p><p><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ:</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></p><p><strong>TransactionDefinition.ISOLATION_SERIALIZABLE:</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</p><h2 id="Spring事务集成"><a href="#Spring事务集成" class="headerlink" title="Spring事务集成"></a>Spring事务集成</h2><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><p>通过在方法或类或接口上添加注解进行包装，无侵入地实现事务，更方便，但粒度更大。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED,timeout = 3000,rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">save</span><span class="params">(Integer id,String name)</span>{</span><br><span class="line">    String insertSql=<span class="string">"insert into `tb_user`(`id`,`name`)values(?,?);"</span>;</span><br><span class="line">    jdbcTemplate.update(insertSql,id,name);</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">"select  count(*) from tb_user"</span>,Integer.class);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h3><p>通过编码的方式手动启用、提交或回滚事务，粒度更细，但更麻烦。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">save</span><span class="params">(Integer id,String name)</span>{</span><br><span class="line">    Integer num=transactionTemplate.&lt;Integer&gt;execute((TransactionStatus status)-&gt;{</span><br><span class="line">      <span class="keyword">try</span>{</span><br><span class="line">        String insertSql=<span class="string">"insert into `tb_user`(`id`,`name`)values(?,?);"</span>;</span><br><span class="line">        jdbcTemplate.update(insertSql,id,name);</span><br><span class="line">      }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        status.setRollbackOnly();</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">"select  count(*) from tb_user"</span>,Integer.class);</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  }</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">  <span class="keyword">public</span> Integer <span class="title function_">save2</span><span class="params">(Integer id,String name)</span>{</span><br><span class="line">    TransactionStatus transactionStatus=transactionManager.getTransaction(<span class="keyword">new</span> <span class="title class_">DefaultTransactionDefinition</span>());</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">      String insertSql=<span class="string">"insert into `tb_user`(`id`,`name`)values(?,?);"</span>;</span><br><span class="line">      jdbcTemplate.update(insertSql,id,name);</span><br><span class="line">        transactionManager.commit(transactionStatus);</span><br><span class="line">      }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        transactionManager.rollback(transactionStatus);</span><br><span class="line">      }</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">"select  count(*) from tb_user"</span>,Integer.class);</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h3 id="AOP全局事务"><a href="#AOP全局事务" class="headerlink" title="AOP全局事务"></a>AOP全局事务</h3><p>一般在项目中使用等待全局性事务，拦截特定包下面的特定方法，不推荐使用。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//事务依然生效</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(DataSource.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxAdviceInterceptor</span> {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line">  <span class="meta">@Value("${tx.timeout:5}")</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">TX_METHOD_TIMEOUT</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> <span class="variable">AOP_POINTCUT_EXPRESSION</span> <span class="operator">=</span> <span class="string">"execution(* codehome.vip.*.service.*.*(..)) "</span>;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> TransactionInterceptor <span class="title function_">txAdvice</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">NameMatchTransactionAttributeSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NameMatchTransactionAttributeSource</span>();</span><br><span class="line">    <span class="comment">/*只读事务，不做更新操作*/</span></span><br><span class="line">    <span class="type">RuleBasedTransactionAttribute</span> <span class="variable">readOnlyTx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuleBasedTransactionAttribute</span>();</span><br><span class="line">    readOnlyTx.setReadOnly(<span class="literal">true</span>);</span><br><span class="line">    readOnlyTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED);</span><br><span class="line">    <span class="comment">/*当前存在事务就使用当前事务，当前不存在事务就创建一个新的事务*/</span></span><br><span class="line">    <span class="type">RuleBasedTransactionAttribute</span> <span class="variable">requiredTx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuleBasedTransactionAttribute</span>();</span><br><span class="line">    requiredTx.setRollbackRules(</span><br><span class="line">        Collections.singletonList(<span class="keyword">new</span> <span class="title class_">RollbackRuleAttribute</span>(Exception.class)));</span><br><span class="line">    requiredTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line">    requiredTx.setTimeout(TX_METHOD_TIMEOUT);</span><br><span class="line">    Map&lt;String, TransactionAttribute&gt; txMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    txMap.put(<span class="string">"save*"</span>, requiredTx);</span><br><span class="line">    txMap.put(<span class="string">"update*"</span>, requiredTx);</span><br><span class="line">    txMap.put(<span class="string">"remove*"</span>, requiredTx);</span><br><span class="line">    txMap.put(<span class="string">"*"</span>, readOnlyTx);</span><br><span class="line">    source.setNameMap(txMap);</span><br><span class="line">    <span class="type">TransactionInterceptor</span> <span class="variable">txAdvice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionInterceptor</span>(transactionManager, source);</span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) {</span><br><span class="line">      logger.info(<span class="string">"事务管理器启动成功！"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> txAdvice;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> Advisor <span class="title function_">txAdviceAdvisor</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">AspectJExpressionPointcut</span> <span class="variable">pointcut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AspectJExpressionPointcut</span>();</span><br><span class="line">    pointcut.setExpression(AOP_POINTCUT_EXPRESSION);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultPointcutAdvisor</span>(pointcut, txAdvice());</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;事务是逻辑上的一组操作，要么都执行，要么都不执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;事务特性-ACID&quot;&gt;&lt;a href=&quot;#事务特性-ACID&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>谈一谈SpringBoot怎么使用事件机制</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/%E8%B0%88%E4%B8%80%E8%B0%88SpringBoot%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/%E8%B0%88%E4%B8%80%E8%B0%88SpringBoot%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2023-09-24T18:00:13.000Z</published>
    <updated>2024-02-27T06:59:45.016Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><blockquote><p>对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。观察者模式（Observer）又称发布-订阅模式（Publish-Subscribe：Pub/Sub）。它是一种通知机制，让发送通知的一方（被观察方）和接收通知的一方（观察者）能彼此分离，互不影响。</p></blockquote><p>观察者模式主要由以下四个角色组成，分别是抽象主题角色、抽象观察者角色、具体主题角色、具体观察者角色。</p><h3 id="抽象主题角色"><a href="#抽象主题角色" class="headerlink" title="抽象主题角色"></a>抽象主题角色</h3><p>​把所有观察者对象的引用保存在一个集合中，每个抽象主题角色都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者角色，一般用一个抽象类或接口来实现。JDk内置实现的抽象主题角色Observable类。</p><p><a href="/img/Observable.png" title="Observable" class="gallery-item" style="box-shadow: none;"> <img src="/img/Observable.png" alt="Observable"></a></p><h3 id="具体主题角色"><a href="#具体主题角色" class="headerlink" title="具体主题角色"></a>具体主题角色</h3><p>在具体主题内部状态改变时，给所有登记过的观察者发出通知，具体主题角色通常用一个子类实现。写一个类(具体主题角色)继承Observable（抽象主题角色），只需要写一个change方法即可 (该方法作用是通知已注册的具体主题角色更新自己)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  具体主题角色(被观察者)，在自身一些状态变更时通知观察者</span></span><br><span class="line"><span class="comment"> *  这里应用被人注册了，观察观察者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> codehome</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppObservable</span> <span class="keyword">extends</span> <span class="title class_">Observable</span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registry</span><span class="params">(String userName)</span> {</span><br><span class="line">setChanged();</span><br><span class="line">notifyObservers(userName);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="抽象观察者角色"><a href="#抽象观察者角色" class="headerlink" title="抽象观察者角色"></a>抽象观察者角色</h3><p>为所有具体的观察者定义一个接口，在得到主题的通知时更新自己。JDK内置的Observer接口。</p><p><a href="/img/Observable2.png" title="Observable2" class="gallery-item" style="box-shadow: none;"> <img src="/img/Observable2.png" alt="Observable2"></a></p><h3 id="具体观察者角色"><a href="#具体观察者角色" class="headerlink" title="具体观察者角色"></a>具体观察者角色</h3><p>该角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调，如果需要，具体观察者角色可以有一个指向具体主题角色的引用，通常用一个子类实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体观察者，实现更新方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> codehome</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppWatcher</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable o, Object arg)</span> {</span><br><span class="line"><span class="keyword">if</span>(o <span class="keyword">instanceof</span> AppObservable) {</span><br><span class="line">System.out.println(o);</span><br><span class="line">System.out.println(arg);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubPubDemo</span> {</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">//主题角色，被观察者</span></span><br><span class="line">AppObservable appObservable=<span class="keyword">new</span> <span class="title class_">AppObservable</span>();</span><br><span class="line"><span class="comment">//观察者</span></span><br><span class="line">AppWatcher appWatcher=<span class="keyword">new</span> <span class="title class_">AppWatcher</span>();</span><br><span class="line"><span class="comment">//添加观察者</span></span><br><span class="line">appObservable.addObserver(appWatcher);</span><br><span class="line"><span class="comment">//调用更新方法</span></span><br><span class="line">appObservable.registry(<span class="string">"zhangsan"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="事件机制"><a href="#事件机制" class="headerlink" title="事件机制"></a>事件机制</h2><blockquote><p>JDK 1.0及更早版本的事件模型基于职责链模式，但是这种模型不适用于复杂的系统，因此在JDK 1.1及以后的各个版本中，事件处理模型采用基于观察者模式的委派事件模型(DelegationEvent Model, DEM)，即一个Java组件所引发的事件并不由引发事件的对象自己来负责处理，而是委派给独立的事件处理对象负责。</p></blockquote><p>事件机制一般需要3个角色，事件触发源(event source)、事件状态对象(event object)、事件监听者(event listener)。</p><h3 id="事件状态对象"><a href="#事件状态对象" class="headerlink" title="事件状态对象"></a>事件状态对象</h3><p>JDK内置的事件状态对象EventObject,持有事件触发源。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventObject</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">5516075349620653480L</span>;</span><br><span class="line"><span class="comment">//事件触发源</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">transient</span> Object  source;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EventObject</span><span class="params">(Object source)</span> {</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"null source"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.source = source;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getSource</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">"[source="</span> + source + <span class="string">"]"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="事件监听者"><a href="#事件监听者" class="headerlink" title="事件监听者"></a>事件监听者</h3><p>JDK内置的事件监听接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EventListener</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Spring内置的事件发布订阅"><a href="#Spring内置的事件发布订阅" class="headerlink" title="Spring内置的事件发布订阅"></a>Spring内置的事件发布订阅</h2><p>上面介绍了观察者与发布者模式，与事件机制。举例总结来说如下图：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">车/事件触发源 --更新状态--&gt; 坏了/事件状态 --事件管理器通知--&gt; 车主/事件监听者</span><br></pre></td></tr></tbody></table></figure><h3 id="ApplicationEvent"><a href="#ApplicationEvent" class="headerlink" title="ApplicationEvent"></a>ApplicationEvent</h3><p>ApplicationEvent实现了JDK的EventObject接口，为事件状态，持有事件触发源。</p><p><a href="https://cdn.jsdelivr.net/gh/mytianya/public-imgbed/img/image-20210121201447139.png" title="image-20210121201447139" class="gallery-item" style="box-shadow: none;"> <img src="https://cdn.jsdelivr.net/gh/mytianya/public-imgbed/img/image-20210121201447139.png" alt="image-20210121201447139"></a></p><h3 id="ApplicationListener"><a href="#ApplicationListener" class="headerlink" title="ApplicationListener"></a>ApplicationListener</h3><p>ApplicationListener实现了JDK的Eventlistener接口，为事件监听者接口。</p><p><a href="https://cdn.jsdelivr.net/gh/mytianya/public-imgbed/img/image-20210121201343005.png" title="image-20210121201343005" class="gallery-item" style="box-shadow: none;"> <img src="https://cdn.jsdelivr.net/gh/mytianya/public-imgbed/img/image-20210121201343005.png" alt="image-20210121201343005"></a></p><h3 id="ApplicationEventMulticaster"><a href="#ApplicationEventMulticaster" class="headerlink" title="ApplicationEventMulticaster"></a>ApplicationEventMulticaster</h3><p>ApplicationEventMulticaster为事件监听者与事件状态的管理接口，管理事件状态与监听器的关系。</p><p><a href="https://cdn.jsdelivr.net/gh/mytianya/public-imgbed/img/image-20210121201802357.png" title="image-20210121201802357" class="gallery-item" style="box-shadow: none;"> <img src="https://cdn.jsdelivr.net/gh/mytianya/public-imgbed/img/image-20210121201802357.png" alt="image-20210121201802357"></a></p><h2 id="SpringBoot如何使用事件发布订阅机制"><a href="#SpringBoot如何使用事件发布订阅机制" class="headerlink" title="SpringBoot如何使用事件发布订阅机制"></a>SpringBoot如何使用事件发布订阅机制</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承ApplicationEvent接口，定义一个事件状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppStatusEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new ApplicationEvent.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source the object on which the event initially occurred (never {<span class="doctag">@code</span> null})</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AppDO appDO;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AppStatusEvent</span><span class="params">(Object source,AppDO appDO)</span> {</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.appDO=appDO;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AppDO <span class="title function_">getAppDO</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> appDO;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听对应事件的事件监听器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppStatusListener</span> {</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(AppStatusEvent event)</span>{</span><br><span class="line">        AppDO appDO=event.getAppDO();</span><br><span class="line">        <span class="keyword">if</span>(AuthUtil.commomCheck(appDO)){</span><br><span class="line">            log.info(<span class="string">"{}被禁用,开始关闭与imf系统的收发"</span>,appDO.getAppName());</span><br><span class="line">            SessionUtil.forbidden(appDO.getAppCode());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发布事件</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ApplicationEventPublisher eventPublisher;</span><br><span class="line">eventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">AppStatusEvent</span>(<span class="built_in">this</span>,app));</span><br></pre></td></tr></tbody></table></figure><p><strong>千里之行，始于足下。这里是SpringBoot教程系列关于spring的事件机制，本教程所有项目源码均可以在我的<a href="https://github.com/mytianya/springboot-tutorials" title="GitHub">GitHub</a>上面下载源码。</strong></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;对象之间定义了一对多的依赖，这</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot2.x基础教程：SpringCache缓存抽象详解与Ehcache、Redis缓存配置实战</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9ASpringCache%E7%BC%93%E5%AD%98%E6%8A%BD%E8%B1%A1%E8%AF%A6%E8%A7%A3%E4%B8%8EEhcache%E3%80%81Redis%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%AE%9E%E6%88%98/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9ASpringCache%E7%BC%93%E5%AD%98%E6%8A%BD%E8%B1%A1%E8%AF%A6%E8%A7%A3%E4%B8%8EEhcache%E3%80%81Redis%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E5%AE%9E%E6%88%98/</id>
    <published>2023-09-24T18:00:11.000Z</published>
    <updated>2024-02-27T06:59:45.013Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>在计算机发展史中一台计算机只需要外部存储器就能运行，但是在实际中磁盘的读取数据的速度往往跟不上CPU的运算速度，因此引入的内存作为CPU和外部存储器之间的缓冲区域。<br>在项目开发过程数据库数据的查询速度远远比不上数据在内存中的访问速度，因此我们通常使用缓存来提高热点数据的访问速度，缓存可谓是计算机科学中最伟大的发明。</p></blockquote><h2 id="缓存基本知识"><a href="#缓存基本知识" class="headerlink" title="缓存基本知识"></a>缓存基本知识</h2><h3 id="缓存命中率"><a href="#缓存命中率" class="headerlink" title="缓存命中率"></a>缓存命中率</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命中率=从缓存中读取的速度/总读取次数(从缓存读取次数+从慢速设备读取次数)</span><br><span class="line">Miss率=没有从缓存中读取的速度/总读取次数(从缓存读取次数+从慢速设备读取次数)</span><br></pre></td></tr></tbody></table></figure><p>这是一个缓存非常重要的一个性能指标，往往命中率越高表示缓存作用越大</p><h3 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h3><p>移除策略，即如果缓存满了，如何从缓存中移除数据的策略</p><ol><li>FIFO(First in First Out):先进先出算法，即先放入缓存的数据先被移除</li><li>LRU(Least Recently used)：最久未使用的数据优先被有限移除</li><li>LFU(Least Frequently used): 最少被使用的数据有限被移除</li></ol><h3 id="缓存设置参数"><a href="#缓存设置参数" class="headerlink" title="缓存设置参数"></a>缓存设置参数</h3><ol><li>TTL(Time To live): 存活期，即从缓存中创建时间点开始直到它到期的一个时间段（不管在这个时间段内有没有访问都将过期）</li><li>TTI(Time To Idle): 空闲期，即一个数据多久没被访问将从缓存中移除的时间。</li><li>最多被缓存的元素</li></ol><h2 id="Spring注解缓存"><a href="#Spring注解缓存" class="headerlink" title="Spring注解缓存"></a>Spring注解缓存</h2><p>Spring 3.1之后，引入了注解缓存技术，其本质上不是一个具体的缓存实现方案，而是一个对缓存使用的抽象，通过在既有代码中添加少量自定义的各种annotation，即能够达到使用缓存对象和缓存方法的返回对象的效果。Spring的缓存技术具备相当的灵活性，不仅能够使用SpEL（Spring Expression Language）来定义缓存的key和各种condition，还提供开箱即用的缓存临时存储方案，也支持和主流的专业缓存集成。其特点总结如下：</p><ol><li>少量的配置annotation注释即可使得既有代码支持缓存；</li><li>支持开箱即用，不用安装和部署额外的第三方组件即可使用缓存；</li><li>支持Spring Express Language（SpEL），能使用对象的任何属性或者方法来定义缓存的key和使用规则条件；</li><li>支持自定义key和自定义缓存管理者，具有相当的灵活性和可扩展性。</li></ol><h3 id="缓存相关注解"><a href="#缓存相关注解" class="headerlink" title="缓存相关注解"></a>缓存相关注解</h3><table><thead><tr><th>注解</th><th>说明</th><th>配置参数</th></tr></thead><tbody><tr><td>@Cacheable</td><td>根据方法的请求参数对其结果进行缓存</td><td>value：缓存的名称；key：缓存的 key，可以为空，也可按照SpEL 表达式编写，如果不指定，则默认按照方法的所有参数进行组合； condition：缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存</td></tr><tr><td>@CachePut</td><td>根据方法的请求参数对其结果进行缓存，和 @Cacheable 不同的是，它每次都会触发真实方法的调用</td><td>value：缓存的名称；key：缓存的 key，可以为空，也可按照SpEL 表达式编写，如果不指定，则默认按照方法的所有参数进行组合； condition：缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存</td></tr><tr><td>@CacheEvict</td><td>够根据一定的条件对缓存进行清空</td><td>value：缓存的名称；key：缓存的 key，可以为空，也可按照SpEL 表达式编写，如果不指定，则默认按照方法的所有参数进行组合；condition：缓存的条件，可以为空，使用 SpEL 编写，返回 true 或者 false，只有为 true 才进行缓存； allEntries：是否清空所有缓存内容，默认为 false，如果指定为 true，则方法调用后将立即清空所有缓存； beforeInvocation：是否在方法执行前就清空，默认为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存，默认情况下，如果方法执行抛出异常，则不会清空缓存</td></tr></tbody></table><h3 id="集成Ehcache缓存"><a href="#集成Ehcache缓存" class="headerlink" title="集成Ehcache缓存"></a>集成Ehcache缓存</h3><p>EhCache是一个比较成熟的Java缓存框架，最早从hibernate发展而来， 是进程中的缓存系统，它提供了用内存，磁盘文件存储，以及分布式存储方式等多种灵活的cache管理方案，快速简单。<br>Springboot对ehcache的使用非常支持，所以在Springboot中只需做些配置就可使用，且使用方式也简易。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="配置Ehcache缓存配置"><a href="#配置Ehcache缓存配置" class="headerlink" title="配置Ehcache缓存配置"></a>配置Ehcache缓存配置</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"../config/ehcache.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--磁盘路径，内存满了存放位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"caches"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"users"</span></span></span><br><span class="line"><span class="tag"> &lt;!<span class="attr">--</span> <span class="attr">最多存储的元素--</span>&gt;</span></span><br><span class="line">maxElementsInMemory="10000"</span><br><span class="line"><span class="comment">&lt;!--缓存中对象是否永久有效--&gt;</span></span><br><span class="line">    eternal="false"</span><br><span class="line"><span class="comment">&lt;!--缓存数据在失效前的允许闲置时间(单位:秒)，仅当eternal=false时使用,默认值是0表示可闲置时间无穷大,若超过这个时间没有访问此Cache中的某个元素,那么此元素将被从Cache中清除--&gt;</span></span><br><span class="line">    timeToIdleSeconds="120"</span><br><span class="line"><span class="comment">&lt;!--缓存数据的总的存活时间（单位：秒），仅当eternal=false时使用，从创建开始计时，失效结束。--&gt;</span></span><br><span class="line">    timeToLiveSeconds="120"</span><br><span class="line"><span class="comment">&lt;!--磁盘缓存中最多可以存放的元素数量,0表示无穷大--&gt;</span></span><br><span class="line">    maxElementsOnDisk="10000000"</span><br><span class="line">    diskExpiryThreadIntervalSeconds="120"</span><br><span class="line"><span class="comment">&lt;!--缓存策略--&gt;</span></span><br><span class="line">    memoryStoreEvictionPolicy="LRU"&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">"localTempSwap"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>applicatin.yml配置ehcache地址，在springboot启动类加上@EnableCaching注解</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cache:</span><br><span class="line">    ehcache:</span><br><span class="line">      config: classpath:ehcache.xml</span><br><span class="line">    type: ehcache</span><br></pre></td></tr></tbody></table></figure><h3 id="配置Redis缓存配置"><a href="#配置Redis缓存配置" class="headerlink" title="配置Redis缓存配置"></a>配置Redis缓存配置</h3><h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span><span class="comment">//开启缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger log= LoggerFactory.getLogger(RedisConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisCacheManager</span>(</span><br><span class="line">                RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory),</span><br><span class="line">                <span class="built_in">this</span>.getRedisCacheConfigurationWithTtl(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>), <span class="comment">// 默认策略，未配置的 key 会使用这个</span></span><br><span class="line">                <span class="built_in">this</span>.getRedisCacheConfigurationMap() <span class="comment">// 指定 key 策略</span></span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, RedisCacheConfiguration&gt; <span class="title function_">getRedisCacheConfigurationMap</span><span class="params">()</span> {</span><br><span class="line">        Map&lt;String, RedisCacheConfiguration&gt; redisCacheConfigurationMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//可以进行过期时间配置</span></span><br><span class="line">        redisCacheConfigurationMap.put(<span class="string">"24h"</span>, <span class="built_in">this</span>.getRedisCacheConfigurationWithTtl(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>));</span><br><span class="line">        redisCacheConfigurationMap.put(<span class="string">"30d"</span>, <span class="built_in">this</span>.getRedisCacheConfigurationWithTtl(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">30</span>));</span><br><span class="line">        <span class="keyword">return</span> redisCacheConfigurationMap;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisCacheConfiguration <span class="title function_">getRedisCacheConfigurationWithTtl</span><span class="params">(Integer seconds)</span> {</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">redisCacheConfiguration</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line"></span><br><span class="line">        redisCacheConfiguration = redisCacheConfiguration.serializeValuesWith(</span><br><span class="line">                RedisSerializationContext</span><br><span class="line">                        .SerializationPair</span><br><span class="line">                        .fromSerializer(jackson2JsonRedisSerializer)</span><br><span class="line">        ).entryTtl(Duration.ofSeconds(seconds));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义前缀 默认为中间两个：</span></span><br><span class="line">        redisCacheConfiguration = redisCacheConfiguration.computePrefixWith(myKeyPrefix());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisCacheConfiguration;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存前缀（追加一个冒号 : ）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> CacheKeyPrefix <span class="title function_">myKeyPrefix</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> (name) -&gt; {</span><br><span class="line">            <span class="keyword">return</span> name +<span class="string">":"</span>;</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成Key规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyGenerator <span class="title function_">wiselyKeyGenerator</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyGenerator</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">generate</span><span class="params">(Object target, Method method, Object... params)</span> {</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                sb.append(target.getClass().getName());</span><br><span class="line">                sb.append(<span class="string">"."</span> + method.getName());</span><br><span class="line">                <span class="keyword">if</span>(params==<span class="literal">null</span>||params.length==<span class="number">0</span>||params[<span class="number">0</span>]==<span class="literal">null</span>){</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="type">String</span> <span class="variable">join</span> <span class="operator">=</span> String.join(<span class="string">"&amp;"</span>, Arrays.stream(params).map(Object::toString).collect(Collectors.toList()));</span><br><span class="line">                <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> String.format(<span class="string">"%s{%s}"</span>, sb.toString(), join);</span><br><span class="line">                <span class="comment">//log.info("缓存key：" + format);</span></span><br><span class="line">                <span class="keyword">return</span> format;</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> {</span><br><span class="line">        RedisTemplate&lt;String, String&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, String&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CacheErrorHandler <span class="title function_">errorHandler</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">CacheErrorHandler</span> <span class="variable">cacheErrorHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheErrorHandler</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCacheGetError</span><span class="params">(RuntimeException e, Cache cache, Object key)</span> {</span><br><span class="line">                log.info(<span class="string">"redis缓存获取异常："</span>+ key);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCachePutError</span><span class="params">(RuntimeException e, Cache cache, Object key, Object value)</span> {</span><br><span class="line">                log.info(<span class="string">"redis缓存添加异常："</span>+ key);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCacheEvictError</span><span class="params">(RuntimeException e, Cache cache, Object key)</span> {</span><br><span class="line">                log.info(<span class="string">"redis缓存删除异常："</span>+ key);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCacheClearError</span><span class="params">(RuntimeException e, Cache cache)</span> {</span><br><span class="line">                log.info(<span class="string">"redis缓存清理异常"</span>);</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">return</span> cacheErrorHandler;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>applicatin.yml配置Redis连接信息</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">5000ms</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br></pre></td></tr></tbody></table></figure><h2 id="缓存注解使用举例"><a href="#缓存注解使用举例" class="headerlink" title="缓存注解使用举例"></a>缓存注解使用举例</h2><p>对用户的查询、新增、删除使用缓存，以及更新缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> {</span><br><span class="line">    <span class="meta">@Cacheable(value = "users",key = "#userDO.id")</span></span><br><span class="line">    List&lt;UserDO&gt; <span class="title function_">queryUsers</span><span class="params">(UserDO userDO)</span>;</span><br><span class="line">    <span class="meta">@CachePut(value = "users",key ="#userDO.id" )</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(UserDO userDO)</span>;</span><br><span class="line">    <span class="meta">@CacheEvict(value = "users",key = "#userDO.id")</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">(UserDO userDO)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>千里之行，始于足下。这里是SpringBoot教程系列第十五篇，所有项目源码均可以在我的<a href="https://github.com/mytianya/springboot-tutorials" title="GitHub">GitHub</a>上面下载源码。</strong></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;在计算机发展史中一台计算机只需要外部存储器就能运行，但是在实际中磁盘的读取数据的速度往往跟不上CPU的运算速度，因此引入的内存作为CPU和外部存储器之间的缓冲区域。&lt;br&gt;在项目开发过程数</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot2.x基础教程：日志配置</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</id>
    <published>2023-09-24T18:00:10.000Z</published>
    <updated>2024-02-27T06:59:45.014Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>项目的开发过程中，开发人员对于日志一定不会陌生。日志能够记录程序运行的轨迹，输出软件运行中的关键信息，辅助我们排查与定位问题，优化程序运行性能，监控程序运行状态，不可不谓重要。<br>SpringBoot项目的spring-boot-starter默认引用spring-boot-starter-logging,其中底层采用logback日志框架，默认零配置即可使用日志记录功能。<br>在讲解springboot日志配置之前先简单谈谈JAVA日志有关的基础知识。</p></blockquote><h2 id="日志记录的时机"><a href="#日志记录的时机" class="headerlink" title="日志记录的时机"></a>日志记录的时机</h2><ul><li>记录程序初始化有关启动的参数，判断程序的运行状态</li><li>代码抛出异常，记录程序异常状态</li><li>业务流程与预期结果不符，记录业务异常状态</li><li>系统核心业务，核心权限操作。比如登录、付款等操作记录，通常还会入库分析。</li></ul><h2 id="Java日志框架"><a href="#Java日志框架" class="headerlink" title="Java日志框架"></a>Java日志框架</h2><p>对于日志框架，我们通常会看到log4j、logback等名词，也会遇到自己项目与第三方jar的日志库冲突问题。<br>初次接触这些，可能有种云雾缭绕不知所云的感觉，下面简单介绍下Java日志框架的关系。更具体的历史缘由，细节部分。网上有几篇文章介绍的很好，给大家附上自行阅读理解:</p><ol><li><a href="https://zhuanlan.zhihu.com/p/24272450">知乎上面有篇文章：java日志框架解析</a></li><li><a href="https://www.cnblogs.com/chenhongliang/p/5312517.html">博客上面有篇文章：Java常用日志框架介绍</a></li></ol><p>看完以上文章简单的总结Java日志框架分为3类：</p><ul><li>Java日志框架的具体的实现：log4j1.x、JUL(Java Util Log)、Logback、log4j2-core</li><li>Java日志框架的门面对象，只提供接口不提供具体实现：JCL(Commons Logging)、SLF4J(The Simple Logging Facade for Java)、log4j2-api</li><li>Java日志框架之间的适配器，为了让不同日志框架互相转换:jcl-over-slf4j、slf4j-jcl、log4j-over-slf4j、slf4j-log4j12等等<br><a href="https://pan.codehome.vip/images/I9nRhzurQmLXtoa.jpg" class="gallery-item" style="box-shadow: none;"> <img src="https://pan.codehome.vip/images/I9nRhzurQmLXtoa.jpg"></a></li></ul><p>关于日志框架的最佳实践（来源参考链接，这里只是摘出）：</p><ol><li>总是使用Log Facade，而不是具体Log Implementation</li><li>只添加一个 Log Implementation依赖</li><li>具体的日志实现依赖应该设置为optional和使用runtime scope</li><li>如果有必要, 排除依赖的第三方库中的Log Impementation依赖</li><li>避免输出不必要的日志，跟不必要的日志字段如行号影响程序性能</li></ol><h2 id="SpringBoot日志配置"><a href="#SpringBoot日志配置" class="headerlink" title="SpringBoot日志配置"></a>SpringBoot日志配置</h2><h3 id="日志依赖"><a href="#日志依赖" class="headerlink" title="日志依赖"></a>日志依赖</h3><p>springboot默认使用SLF4J+Logback的组合记录日志，查看依赖可知，不用我们额外引入。<br><a href="/img/java-log.png" title="java-log" class="gallery-item" style="box-shadow: none;"> <img src="/img/java-log.png" alt="java-log"></a></p><h3 id="springboot日志配置"><a href="#springboot日志配置" class="headerlink" title="springboot日志配置"></a>springboot日志配置</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment">#包的日志级别</span></span><br><span class="line">    <span class="attr">org.springframework.web:</span> <span class="string">DEBUG</span></span><br><span class="line">  <span class="comment">#自定义log信息</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:config/logback-spring.xml</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="comment">#控制台的日志输出格式</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">'%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n'</span></span><br><span class="line">    <span class="comment">#文件的日志输出格式</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">'%d{yyyy/MM/dd-HH:mm} [%thread] %-5level %logger- %msg%n'</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="comment">#日志名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">app.log</span></span><br><span class="line">    <span class="comment">#存储的路径</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/var/log/</span></span><br><span class="line">    <span class="comment">#存储的最大值</span></span><br><span class="line">    <span class="attr">max-size:</span> <span class="string">50MB</span></span><br><span class="line">    <span class="comment">#保存时间</span></span><br><span class="line">    <span class="attr">max-history:</span> <span class="number">7</span></span><br></pre></td></tr></tbody></table></figure><p><a href="https://pan.codehome.vip/images/u5i6kveV2nxtdRQ.png" title="image-20200924220454446" class="gallery-item" style="box-shadow: none;"> <img src="https://pan.codehome.vip/images/u5i6kveV2nxtdRQ.png" alt="image-20200924220454446"></a></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--获取变量名中关于日志存储的路径与存储名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"logPath"</span> <span class="attr">source</span>=<span class="string">"logging.file.path"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"logName"</span> <span class="attr">source</span>=<span class="string">"logging.file.name"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"Console"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span></span><br><span class="line">                %black(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%C{1.}): %msg%n%throwable</span><br><span class="line">            <span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到文件的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"RollingFile"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>${logPath}/${logName}<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %C{1.} [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rollover daily and when the file reaches 10 MegaBytes --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>${LOGS}/archived/spring-boot-logger-%d{yyyy-MM-dd}.%i.log</span><br><span class="line">            <span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开发环境基本级别为DEBUG--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生产环境输入到文件中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFile"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>千里之行，始于足下。这里是SpringBoot教程系列第八篇，所有项目源码均可以在我的<a href="https://github.com/mytianya/springboot-tutorials" title="GitHub">GitHub</a>上面下载源码。</strong></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;项目的开发过程中，开发人员对于日志一定不会陌生。日志能够记录程序运行的轨迹，输出软件运行中的关键信息，辅助我们排查与定位问题，优化程序运行性能，监控程序运行状态，不可不谓重要。&lt;br&gt;Sp</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot2.x基础教程：动手制作一个starter包</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E5%8A%A8%E6%89%8B%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAstarter%E5%8C%85/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E5%8A%A8%E6%89%8B%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAstarter%E5%8C%85/</id>
    <published>2023-09-24T18:00:09.000Z</published>
    <updated>2024-02-27T06:59:45.013Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>上一篇博客介绍了springboot自动装配的原理。springboot本身有丰富的spring-boot-starter-xx集成组件，这一篇趁热打铁加深理解，我们利用springboot自动装配的机制，制作一个属于自己的starter包。</p></blockquote><h2 id="制作一个starter包思路"><a href="#制作一个starter包思路" class="headerlink" title="制作一个starter包思路"></a>制作一个starter包思路</h2><p>​这一篇博客我制作一个上传图片第三方图床的starter，集成常见的第三方图床sm.ms、imgur、github图床等。</p><p>​本教程不会具体的讲解图床上传相关的代码，而是主要分析封装此starter的思路。</p><ol><li>首先安装springboot第三方的starter规范命名：xx-spring-boot-starter,我们项目取名为imghost-spring-boot-starter。</li><li>对于图床相关的配置项，我们同样准备建立一个ImgHostProperties配置类存放。</li><li>同样我们也需要一个ImgHostAutoConfiguration,并且加上条件注解在某些情况下才会注入我们的工具类到IOC容器中。</li><li>按照规范在我们项目的META-INF/spring.factories文件下，指定我们starter的自动装配类。</li></ol><h2 id="项目结构一览"><a href="#项目结构一览" class="headerlink" title="项目结构一览"></a>项目结构一览</h2><p><a href="https://www.codehome.vip/upload/spring-boot-start1.png" class="gallery-item" style="box-shadow: none;"> <img src="https://www.codehome.vip/upload/spring-boot-start1.png"></a></p><h2 id="Starter开发实例"><a href="#Starter开发实例" class="headerlink" title="Starter开发实例"></a>Starter开发实例</h2><h3 id="引入必要的依赖"><a href="#引入必要的依赖" class="headerlink" title="引入必要的依赖"></a>引入必要的依赖</h3><p>​这里主要引入spring-boot-starter包，spring-boot-configuration-processor其他依赖主要为上传到第三方图床发送Http请求依赖包。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>vip.codehome<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>imghost-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.14.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/spring.factories<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--把注释源码也打入基础包中--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="定义一个图床参数上传的配置类"><a href="#定义一个图床参数上传的配置类" class="headerlink" title="定义一个图床参数上传的配置类"></a>定义一个图床参数上传的配置类</h3><p>​上传到SM.MS的API需要上传的token，在sm.ms网站注册获取个人的私钥，后面如果上传到imgur同样可以在此类中加入对应的配置类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "imghost")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImgHostProperties</span> {</span><br><span class="line">    SMMS smms;</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SMMS</span>{</span><br><span class="line">        String token;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="定义上传服务AutoConfiguration类"><a href="#定义上传服务AutoConfiguration类" class="headerlink" title="定义上传服务AutoConfiguration类"></a>定义上传服务AutoConfiguration类</h3><p>当imghost.smms.token使用者配置时，我们生成一个SMMSImgHostService的图床上传服务类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ImgHostProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = "imghost",name = "enabled",havingValue = "true",matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImgHostAutoConfiguration</span> {</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ImgHostProperties imgHostProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ImgHostAutoConfiguration</span><span class="params">(ImgHostProperties imgHostProperties)</span> {</span><br><span class="line"><span class="built_in">this</span>.imgHostProperties = imgHostProperties;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix="imghost.smms",name="token")</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SMMSImgHostService <span class="title function_">imgHostService</span><span class="params">()</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SMMSImgHostService</span>(imgHostProperties);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="编写spring-factories"><a href="#编写spring-factories" class="headerlink" title="编写spring.factories"></a>编写spring.factories</h3><p>​最后在项目的src/main/resource上加入META-INF/spring.factories中引入我们自定义的ImgHostAutoConfiguration配置类。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=vip.codehome.imghost.ImgHostAutoConfiguration</span><br></pre></td></tr></tbody></table></figure><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li>在使用的项目中引入我们的imghost-spring-boot-starter。</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;vip.codehome&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;imghost-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><p>在springboot项目中加入如下配置<br><a href="/img/spring-boot-starter2.png" class="gallery-item" style="box-shadow: none;"> <img src="/img/spring-boot-starter2.png"></a></p></li><li><p>项目使用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">SMMSImgHostService smms;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">()</span> {</span><br><span class="line">System.out.println(smms.upload(newFile(<span class="string">"D:\\test.jpg"</span>)));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​<strong>千里之行，始于足下。这里是SpringBoot教程系列第十八篇。以上就是我们自己动手制作一个starter包的全过程，是不是很简单。此项目在<a href="https://github.com/mytianya/imghost-spring-boot-starter">github可下载源码</a></strong></p><p>​<strong>当前只是实现了上传到SM.MS图床，后期会逐渐迭代一个上传到sm.ms,imgur，github各种图床的通用工具类，敬请期待。如果觉得不错，点赞、评论、关注三连击</strong></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;上一篇博客介绍了springboot自动装配的原理。springboot本身有丰富的spring-boot-starter-xx集成组件，这一篇趁热打铁加深理解，我们利用springboo</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot2.x基础教程：集成spring-data-jpa</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E9%9B%86%E6%88%90spring-data-jpa/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E9%9B%86%E6%88%90spring-data-jpa/</id>
    <published>2023-09-24T18:00:09.000Z</published>
    <updated>2024-02-27T06:59:45.015Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>Spring Data是Spring 社区的一个子项目，主要用于简化数据（关系型&amp;非关系型）访问，其主要目标是使得数据库的访问变得方便快捷。<br>目前支持的关系型与非关系型数据有Spring data JPA、Mongodb、Redis、JDBC、Elasticsearch….具体可查看<a href="https://spring.io/projects/spring-data" title="Spring官网">Spring官网</a><br>JPA全称为Java Persistence API（Java持久层API），它是Sun公司在JavaEE 5中提出的Java持久化规范。它为Java开发人员提供了一种对象/关联映射工具，来管理Java应用中的关系数据，JPA吸取了目前Java持久化技术的优点，旨在规范、简化Java对象的持久化工作。很多ORM框架都是实现了JPA的规范，如：Hibernate、EclipseLink。<br>Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套 JPA 应用框架，底层使用了 Hibernate 的 JPA 技术实现，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用 Spring Data JPA 可以极大提高开发效率。</p></blockquote><h2 id="SpringBoot集成Spring-data-jpa"><a href="#SpringBoot集成Spring-data-jpa" class="headerlink" title="SpringBoot集成Spring-data-jpa"></a>SpringBoot集成Spring-data-jpa</h2><h3 id="引入JPA依赖"><a href="#引入JPA依赖" class="headerlink" title="引入JPA依赖"></a>引入JPA依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以操作Mysql数据库为例，引入Mysql数据库驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="jpa与Mysql配置"><a href="#jpa与Mysql配置" class="headerlink" title="jpa与Mysql配置"></a>jpa与Mysql配置</h3><p>spring.hibernate.ddl-auto配置介绍：</p><ol><li>create:每次删除上次的表，根据model重新生成新表，一般用于测试，会丢失数据。[删除-创建-操作]</li><li>create-drop：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭，表就自动删除。[删除-创建-操作-再删除]</li><li>update: 最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了，但表中的行仍然存在，不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。[没表-创建-操作 | 有表-更新没有的属性列-操作]</li><li>validate: 每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。[启动验证表结构，验证不成功，项目启动失败]</li></ol><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mytestdb?serverTimezone=UTC&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">create</span></span><br><span class="line">    <span class="comment">#设置数据库方言</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line">    <span class="comment">#打印sql</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="关于数据库表映射的注解"><a href="#关于数据库表映射的注解" class="headerlink" title="关于数据库表映射的注解"></a>关于数据库表映射的注解</h3><ol><li>@Entity: 指定映射的表名</li><li>@Id：指定主键</li><li>@GeneratedValue：主键生成策略</li><li>@Column: 指定映射的列名</li><li>@Temporal: 关于时间的精度</li><li>@Transient: 实体类忽略映射的字段<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity(name = "tb_user")</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> {</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column(name = "name",nullable = false)</span></span><br><span class="line">    String userName;</span><br><span class="line">    String account;</span><br><span class="line">    String passwd;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">boolean</span> forbidden;</span><br><span class="line">    <span class="meta">@Temporal(value = TemporalType.TIMESTAMP)</span></span><br><span class="line">    Date loginTime;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    String token;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><p>是不是很简单??? 只要继承JpaRepository就能通过UserRepository实现对一个实体的CURD操作。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;UserDO,Long&gt; {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="分页、排序、自定义语句查询"><a href="#分页、排序、自定义语句查询" class="headerlink" title="分页、排序、自定义语句查询"></a>分页、排序、自定义语句查询</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;UserDO,Long&gt; {</span><br><span class="line">    <span class="meta">@Query("from tb_user u where u.userName like :userName")</span></span><br><span class="line">    Page&lt;UserDO&gt; <span class="title function_">findUserDOByUserName</span><span class="params">(<span class="meta">@Param("userName")</span>String userName, Pageable pageable)</span>;</span><br><span class="line">    Page&lt;UserDO&gt; <span class="title function_">findAll</span><span class="params">(Pageable pageable)</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//使用方法</span></span><br><span class="line">Pageable pageable= PageRequest.of(<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">Page&lt;UserDO&gt; pageUsers=userRepository.findAll(pageable,Sort.by(<span class="string">"age"</span>).ascending().and(Sort.by(<span class="string">"userName"</span>).descending()));</span><br><span class="line">List&lt;UserDO&gt; users=pageUsers.getContent();</span><br><span class="line"><span class="type">int</span> totalPages= pageUsers.getTotalPages();</span><br></pre></td></tr></tbody></table></figure><h3 id="方法命名规则查询"><a href="#方法命名规则查询" class="headerlink" title="方法命名规则查询"></a>方法命名规则查询</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;UserDO,Long&gt; {</span><br><span class="line">    List&lt;UserDO&gt; <span class="title function_">findUserDOByAccountAndAgeAndUserNameLike</span><span class="params">(String account,<span class="type">int</span> age,String userName)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>更多使用方法：<br><a href="/img/jpa.png" class="gallery-item" style="box-shadow: none;"> <img src="/img/jpa.png"></a><br><strong>Jpa官方文档地址：<a href="https://docs.spring.io/spring-data/jpa/docs/2.3.2.RELEASE/reference/html/#reference">https://docs.spring.io/spring-data/jpa/docs/2.3.2.RELEASE/reference/html/#reference</a><br>千里之行，始于足下。这里是SpringBoot教程系列第六篇，所有项目源码均可以在我的<a href="https://github.com/mytianya/springboot-tutorials" title="GitHub">GitHub</a>上面下载源码。</strong></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;Spring Data是Spring 社区的一个子项目，主要用于简化数据（关系型&amp;amp;非关系型）访问，其主要目标是使得数据库的访问变得方便快捷。&lt;br&gt;目前支持的关系型与非关系型数据有</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot2.x基础教程：集成mybatis最佳实践</title>
    <link href="https://mytianya.github.io/2023/09/25/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E9%9B%86%E6%88%90mybatis%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://mytianya.github.io/2023/09/25/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E9%9B%86%E6%88%90mybatis%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-09-24T18:00:08.000Z</published>
    <updated>2024-02-27T06:59:45.015Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>前面文章介绍过SpringBoot结合Jpa实现对数据库的操作。今天介绍下SprigBoot集成Mybatis的相关知识点。<br>Mybatis作为一个半自动化的ORM框架,根据条件动态拼接SQL，是其一大优点。贴合原生SQL的写法，方便开发人员灵活的编写复杂的SQL语句。<br>SpringBoot集成Mybatis的配置还是相当简单的，教程并且会给出常见针对Mysql数据CURD、分页、批量操作的写法。</p></blockquote><h2 id="SpringBoot配置Mybatis"><a href="#SpringBoot配置Mybatis" class="headerlink" title="SpringBoot配置Mybatis"></a>SpringBoot配置Mybatis</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--分页依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><p>这里使用springboot默认的数据连接池hikari,号称最快的数据库链接池，allowMultiQueries=true开启批量更新。</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/spring?autoReconnect=true&amp;useSSL=false&amp;characterEncoding=utf-8&amp;failOverReadOnly=false&amp;allowMultiQueries=true</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">50</span></span><br><span class="line">      <span class="attr">connection-test-query:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br><span class="line">      <span class="comment">#1分钟后释放</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">600000</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">auto-commit:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">validation-timeout:</span> <span class="number">250</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置Mybatis参数"><a href="#配置Mybatis参数" class="headerlink" title="配置Mybatis参数"></a>配置Mybatis参数</h3><p>这里有两种配置一种直接在springboot默认的application.yml中配置，一种单独提取出来配置，本文采用第二种。</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment">#指定配置mybatis参数配置地址</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis-config.xml</span></span><br><span class="line">  <span class="comment">#指定接口xml地址</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mappers/*.xml</span></span><br></pre></td></tr></tbody></table></figure><p>这里贴出mybatis-config.xml的配置:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全局参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使全局的映射器启用或禁用缓存。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否允许单条sql 返回多个数据集  (取决于驱动的兼容性) default:true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否可以使用列的别名 (取决于驱动的兼容性) default:true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。  default:false  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不隐射　PARTIAL:部分  FULL:全部  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAL"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这是默认的执行类型  （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH: 执行器可以重复执行语句和批量更新）  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对于批量更新操作缓存SQL以提高性能 BATCH,SIMPLE --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库超过25000秒仍未响应则超时 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25000"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用驼峰命名法转换字段。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置本地缓存范围 session:就会有数据的共享  statement:语句范围 (这样就不会有数据的共享 ) defalut:session --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置但JDBC类型为空时,某些驱动程序 要指定值,default:OTHER，插入空值时不需要指定类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"NULL"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指 定)，不会加载关联表的所有字段，以提高性能 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"org.apache.ibatis.logging.stdout.StdOutImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--批量别名，默认为别名的规范就是对应包装类的类名首字母变为小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"vip.codehome.springboot.tutorials.entity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--pagehelper分页插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用MySQL方言的分页 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"helperDialect"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span><span class="comment">&lt;!--如果使用mysql，这里value为mysql--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pageSizeZero"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="增删改查最优写法"><a href="#增删改查最优写法" class="headerlink" title="增删改查最优写法"></a>增删改查最优写法</h2><p>针对这张表给出Mybatis常见动态SQL写法<br><a href="/img/tb_user.png" title="tb_user" class="gallery-item" style="box-shadow: none;"> <img src="/img/tb_user.png" alt="tb_user"></a><br>首先编辑Mapper层接口，注意要加上@Mapper注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(UserDO userDO)</span>;</span><br><span class="line"><span class="comment">//分页查询</span></span><br><span class="line">    List&lt;UserDO&gt; <span class="title function_">select</span><span class="params">(UserDO userDO)</span>;</span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(UserDO userDO)</span>;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(UserDO userDO)</span>;</span><br><span class="line"><span class="comment">//批量插入</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertBatch</span><span class="params">(List&lt;UserDO&gt; list)</span>;</span><br><span class="line"><span class="comment">//批量更新</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateBatch</span><span class="params">(List&lt;UserDO&gt; list)</span>;</span><br><span class="line"><span class="comment">//批量删除</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBatch</span><span class="params">(Long[] array)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>前面配置了mapper-locations为classpath:mappers/*.xml，即mapper对应的xml文件放在src/main/resources/mappers目录下,</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"vip.codehome.springboot.tutorials.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"base"</span>&gt;</span></span><br><span class="line">        id,name,account,age,forbidden,login_time,passwd</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"userDO"</span>&gt;</span></span><br><span class="line">        insert into tb_user(</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            id,</span><br><span class="line">            account,</span><br><span class="line">            passwd,</span><br><span class="line">            name,</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></span><br><span class="line">                age,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"forbidden!=null and forbidden!=''"</span>&gt;</span></span><br><span class="line">                forbidden,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"loginTime!=null"</span>&gt;</span></span><br><span class="line">                login_time,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        )values (</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            #{id},</span><br><span class="line">            #{account},</span><br><span class="line">            #{passwd},</span><br><span class="line">            #{name},</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></span><br><span class="line">                #{age},</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"forbidden!=null and forbidden!=''"</span>&gt;</span></span><br><span class="line">                #{forbidden},</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"loginTime!=null"</span>&gt;</span></span><br><span class="line">                #{loginTime},</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">resultType</span>=<span class="string">"userDO"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"base"</span>/&gt;</span></span><br><span class="line">        from tb_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"account!=null and account!=''"</span>&gt;</span></span><br><span class="line">                and account=#{account}</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and name!=''"</span>&gt;</span></span><br><span class="line">                and name like concat('%',#{name},'%')</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"userDO"</span>&gt;</span></span><br><span class="line">        update tb_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and name!=''"</span>&gt;</span></span><br><span class="line">                name=#{name},</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></span><br><span class="line">                age=#{age}</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id=#{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"userDO"</span>&gt;</span></span><br><span class="line">        delete from tb_user where id=#{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertBatch"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"long"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">            SELECT</span><br><span class="line">            LAST_INSERT_ID()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into tb_user(</span><br><span class="line">        account,passwd,name,age,forbidden,login_time</span><br><span class="line">        )values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"user"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            (#{user.account},</span><br><span class="line">            #{user.passwd},</span><br><span class="line">            #{user.name},</span><br><span class="line">            #{user.age},</span><br><span class="line">            #{user.forbidden},</span><br><span class="line">            #{user.loginTime})</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBatch"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"user"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">open</span>=<span class="string">""</span> <span class="attr">close</span>=<span class="string">""</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></span><br><span class="line">            update tb_user</span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and name!=''"</span>&gt;</span></span><br><span class="line">                    name=#{name},</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></span><br><span class="line">                    age=#{age}</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">            where id=#{id}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBatch"</span> <span class="attr">parameterType</span>=<span class="string">"long"</span>&gt;</span></span><br><span class="line">        delete from tb_user</span><br><span class="line">        where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">            #{id}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="单元测试用例"><a href="#单元测试用例" class="headerlink" title="单元测试用例"></a>单元测试用例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>{</span><br><span class="line">        UserDO userDO=<span class="keyword">new</span> <span class="title class_">UserDO</span>();</span><br><span class="line">        userDO.setPasswd(<span class="string">"codehome"</span>);</span><br><span class="line">        userDO.setAccount(<span class="string">"codehome"</span>);</span><br><span class="line">        userDO.setName(<span class="string">"name"</span>);</span><br><span class="line">        userDO.setForbidden(<span class="literal">true</span>);</span><br><span class="line">        userDO.setLoginTime(LocalDateTime.now());</span><br><span class="line">        userMapper.insert(userDO);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">page</span><span class="params">()</span>{</span><br><span class="line">        PageHelper.startPage(<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">        UserDO userDO=<span class="keyword">new</span> <span class="title class_">UserDO</span>();</span><br><span class="line">        userDO.setName(<span class="string">"n"</span>);</span><br><span class="line">       PageInfo&lt;UserDO&gt; userDOPage= <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(userMapper.select(userDO));</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>{</span><br><span class="line">        UserDO userDO=<span class="keyword">new</span> <span class="title class_">UserDO</span>();</span><br><span class="line">        userDO.setId(<span class="number">1L</span>);</span><br><span class="line">        userDO.setName(<span class="string">"编程之家"</span>);</span><br><span class="line">        userMapper.update(userDO);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>{</span><br><span class="line">        UserDO userDO=<span class="keyword">new</span> <span class="title class_">UserDO</span>();</span><br><span class="line">        userDO.setId(<span class="number">1L</span>);</span><br><span class="line">        userMapper.delete(userDO);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//批量插入</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddBatch</span><span class="params">()</span>{</span><br><span class="line">        UserDO userDO=<span class="keyword">new</span> <span class="title class_">UserDO</span>();</span><br><span class="line">        userDO.setPasswd(<span class="string">"codehome"</span>);</span><br><span class="line">        userDO.setAccount(<span class="string">"codehome"</span>);</span><br><span class="line">        userDO.setName(<span class="string">"name"</span>);</span><br><span class="line">        userDO.setForbidden(<span class="literal">true</span>);</span><br><span class="line">        userDO.setLoginTime(LocalDateTime.now());</span><br><span class="line">        UserDO userDO1=<span class="keyword">new</span> <span class="title class_">UserDO</span>();</span><br><span class="line">        userDO1.setPasswd(<span class="string">"codehome"</span>);</span><br><span class="line">        userDO1.setAccount(<span class="string">"codehome"</span>);</span><br><span class="line">        userDO1.setName(<span class="string">"name"</span>);</span><br><span class="line">        userDO1.setForbidden(<span class="literal">true</span>);</span><br><span class="line">        userDO1.setLoginTime(LocalDateTime.now());</span><br><span class="line">        userMapper.insertBatch(Arrays.asList(userDO,userDO1));</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//批量更新</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateBatch</span><span class="params">()</span>{</span><br><span class="line">        UserDO userDO=<span class="keyword">new</span> <span class="title class_">UserDO</span>();</span><br><span class="line">        userDO.setPasswd(<span class="string">"codehome1"</span>);</span><br><span class="line">        userDO.setAccount(<span class="string">"codehome1"</span>);</span><br><span class="line">        userDO.setName(<span class="string">"name1"</span>);</span><br><span class="line">        userDO.setId(<span class="number">1L</span>);</span><br><span class="line">        userDO.setForbidden(<span class="literal">true</span>);</span><br><span class="line">        userDO.setLoginTime(LocalDateTime.now());</span><br><span class="line">        UserDO userDO1=<span class="keyword">new</span> <span class="title class_">UserDO</span>();</span><br><span class="line">        userDO.setId(<span class="number">2L</span>);</span><br><span class="line">        userDO1.setPasswd(<span class="string">"codehome2"</span>);</span><br><span class="line">        userDO1.setAccount(<span class="string">"codehome2"</span>);</span><br><span class="line">        userDO1.setName(<span class="string">"name2"</span>);</span><br><span class="line">        userDO1.setForbidden(<span class="literal">true</span>);</span><br><span class="line">        userDO1.setLoginTime(LocalDateTime.now());</span><br><span class="line">        userMapper.insertBatch(Arrays.asList(userDO,userDO1));</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">()</span>{</span><br><span class="line">        userMapper.deleteBatch(<span class="keyword">new</span> <span class="title class_">Long</span>[]{<span class="number">1L</span>,<span class="number">2L</span>});</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里举出的例子使用了if、set、where、foreach、trim、sql等标签，更详细的解释可以参考官方<a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html" title="动态 SQL">动态 SQL</a><br><strong>以上就是对springboot集成Mybatis的配置，跟常见CURD与批量操作，更多的内容篇幅有限大家可以参考文中给出的链接。<br>千里之行，始于足下。这里是SpringBoot教程系列第十四篇，所有项目源码均可以在我的<a href="https://github.com/mytianya/springboot-tutorials" title="GitHub">GitHub</a>上面下载源码。</strong></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;前面文章介绍过SpringBoot结合Jpa实现对数据库的操作。今天介绍下SprigBoot集成Mybatis的相关知识点。&lt;br&gt;Mybatis作为一个半自动化的ORM框架,根据条件动态</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Springboot2.x基础教程：@Enable原理</title>
    <link href="https://mytianya.github.io/2023/09/24/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A@Enable%E5%8E%9F%E7%90%86/"/>
    <id>https://mytianya.github.io/2023/09/24/springboot/Springboot2.x%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%9A@Enable%E5%8E%9F%E7%90%86/</id>
    <published>2023-09-24T05:54:08.000Z</published>
    <updated>2024-02-27T06:59:45.012Z</updated>
    
    <content type="html"><![CDATA[<div class=".article-gallery"><blockquote><p>上一篇springboot2.x基础教程：@Async开启异步任务我们使用了@EnableAsync注解来启用异步执行。<br>SpringBoot框架中@Enable*注解有很多例如：@EnableAspectJAutoProxy、@EnableCaching、@EnableAutoConfiguration、@EnableSwagger2这一章讲讲它背后的原理。</p></blockquote><h2 id="几个典型的-Enable-注解"><a href="#几个典型的-Enable-注解" class="headerlink" title="几个典型的@Enable*注解"></a>几个典型的@Enable*注解</h2><p>下面贴出@EnableSwagger2、@EnableAsync、@EnableAspectJAutoProxy这三个注解，不难看出这三个注解都使用了@Import注解。<br>@Import注解支持导入普通的java类,并将其声明成一个bean。<br>实际@Enable注解就是通过@Import注解的能力实现Bean的注入springboot ioc容器，从而使某些配置生效。</p><h3 id="EnableScheduling"><a href="#EnableScheduling" class="headerlink" title="@EnableScheduling"></a>@EnableScheduling</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Target({ElementType.TYPE})</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Import({SchedulingConfiguration.class})</span><br><span class="line">@Documented</span><br><span class="line">public @interface EnableScheduling {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="EnableAsync"><a href="#EnableAsync" class="headerlink" title="@EnableAsync"></a>@EnableAsync</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Target({ElementType.TYPE})</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Import({AsyncConfigurationSelector.class})</span><br><span class="line">public @interface EnableAsync {</span><br><span class="line">    Class&lt;? extends Annotation&gt; annotation() default Annotation.class;</span><br><span class="line">    boolean proxyTargetClass() default false;</span><br><span class="line">    AdviceMode mode() default AdviceMode.PROXY;</span><br><span class="line">    int order() default 2147483647;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="EnableAspectJAutoProxy"><a href="#EnableAspectJAutoProxy" class="headerlink" title="@EnableAspectJAutoProxy"></a>@EnableAspectJAutoProxy</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Target({ElementType.TYPE})</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Import({AspectJAutoProxyRegistrar.class})</span><br><span class="line">public @interface EnableAspectJAutoProxy {</span><br><span class="line">    boolean proxyTargetClass() default false;</span><br><span class="line"></span><br><span class="line">    boolean exposeProxy() default false;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Import注解使用方式"><a href="#Import注解使用方式" class="headerlink" title="@Import注解使用方式"></a>@Import注解使用方式</h2><h3 id="允许使用-Configuration注解的类"><a href="#允许使用-Configuration注解的类" class="headerlink" title="允许使用@Configuration注解的类"></a>允许使用@Configuration注解的类</h3><p>@EnableScheduling注解的@Import导入的是SchedulingConfiguration类，我们看下该类的实现。<br>我们可以看到该类使用了@Configuration、@Bean注解。<br>@Import注解允许使用@Configuration注解的类注入容器中。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@Role(2)</span><br><span class="line">public class SchedulingConfiguration {</span><br><span class="line">    public SchedulingConfiguration() {</span><br><span class="line">    }</span><br><span class="line">    @Bean(</span><br><span class="line">        name = {"org.springframework.context.annotation.internalScheduledAnnotationProcessor"}</span><br><span class="line">    )</span><br><span class="line">    @Role(2)</span><br><span class="line">    public ScheduledAnnotationBeanPostProcessor scheduledAnnotationProcessor() {</span><br><span class="line">        return new ScheduledAnnotationBeanPostProcessor();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="允许使用实现ImportSelectorj接口的类"><a href="#允许使用实现ImportSelectorj接口的类" class="headerlink" title="允许使用实现ImportSelectorj接口的类"></a>允许使用实现ImportSelectorj接口的类</h3><p>@EnableAsync注解的@Import导入的是AsyncConfigurationSelector类，我们看下该类实现。<br>AsyncConfigurationSelector类实现了ImportSelector接口，重写了selectImports方法。<br>@Import注解这里会把selectImports返回的全路径的类注入容器中。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class AsyncConfigurationSelector extends AdviceModeImportSelector&lt;EnableAsync&gt; {</span><br><span class="line">    private static final String ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME = "org.springframework.scheduling.aspectj.AspectJAsyncConfiguration";</span><br><span class="line"></span><br><span class="line">    public AsyncConfigurationSelector() {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    public String[] selectImports(AdviceMode adviceMode) {</span><br><span class="line">        switch(adviceMode) {</span><br><span class="line">        case PROXY:</span><br><span class="line">            return new String[]{ProxyAsyncConfiguration.class.getName()};</span><br><span class="line">        case ASPECTJ:</span><br><span class="line">            return new String[]{"org.springframework.scheduling.aspectj.AspectJAsyncConfiguration"};</span><br><span class="line">        default:</span><br><span class="line">            return null;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="允许是实现了ImportBeanDefinitionRegistrar接口的类"><a href="#允许是实现了ImportBeanDefinitionRegistrar接口的类" class="headerlink" title="允许是实现了ImportBeanDefinitionRegistrar接口的类"></a>允许是实现了ImportBeanDefinitionRegistrar接口的类</h3><p>@EnableAspectJAutoProxy注解的@Import导入的是AspectJAutoProxyRegistrar类，我们再看看该类实现。<br>AspectJAutoProxyRegistrar实现了ImportBeanDefinitionRegistrar接口，ImportBeanDefinitionRegistrar的作用是在运行时自动添加Bean到已有的配置类，并在Spring容器启动时解析生成bean，通过重写方法registerBeanDefinitions。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class AspectJAutoProxyRegistrar implements ImportBeanDefinitionRegistrar {</span><br><span class="line">    AspectJAutoProxyRegistrar() {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {</span><br><span class="line">        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class="line">        AnnotationAttributes enableAspectJAutoProxy = AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);</span><br><span class="line">        if (enableAspectJAutoProxy != null) {</span><br><span class="line">            if (enableAspectJAutoProxy.getBoolean("proxyTargetClass")) {</span><br><span class="line">                AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            if (enableAspectJAutoProxy.getBoolean("exposeProxy")) {</span><br><span class="line">                AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Import注解SpringBoot处理流程源码分析"><a href="#Import注解SpringBoot处理流程源码分析" class="headerlink" title="@Import注解SpringBoot处理流程源码分析"></a>@Import注解SpringBoot处理流程源码分析</h2><ol><li>Spring IOC容器初始化的时候会调用AbstractApplicationContext的refresh方法<br><a href="/img/spring-refresh.png" title="spring-refresh" class="gallery-item" style="box-shadow: none;"> <img src="/img/spring-refresh.png" alt="spring-refresh"></a></li><li>在refresh里会调用各种BeanFactoryPostProcessor。ConfigurationClassPostProcessor的processConfigBeanDefinitions方法有对@Configuration、@Import等对注解的处理。<br><a href="/img/spring-configuration-processor.png" title="spring-configuration-processor" class="gallery-item" style="box-shadow: none;"> <img src="/img/spring-configuration-processor.png" alt="spring-configuration-processor"></a></li><li>ConfigurationClassPostProcessor实际内部通过ConfigurationClassParser处理。</li><li>我们重点看看ConfigurationClassParser这个类对@Import处理。</li></ol><h2 id="ConfigurationClassParser类源码分析"><a href="#ConfigurationClassParser类源码分析" class="headerlink" title="ConfigurationClassParser类源码分析"></a>ConfigurationClassParser类源码分析</h2><p><strong>核心处理代码在ConfigurationClassParser的processImports方法中，实现了对于本文对于@Import三种使用方式的处理过程。</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processImports</span><span class="params">(ConfigurationClass configClass, ConfigurationClassParser.SourceClass currentSourceClass, Collection&lt;ConfigurationClassParser.SourceClass&gt; importCandidates, Predicate&lt;String&gt; exclusionFilter, <span class="type">boolean</span> checkForCircularImports)</span> {</span><br><span class="line"><span class="comment">//....省略部分代码</span></span><br><span class="line">                       ConfigurationClassParser.<span class="type">SourceClass</span> <span class="variable">candidate</span> <span class="operator">=</span> (ConfigurationClassParser.SourceClass)var6.next();</span><br><span class="line">                       Class candidateClass;</span><br><span class="line">                       <span class="keyword">if</span> (candidate.isAssignable(ImportSelector.class)) {</span><br><span class="line"><span class="comment">//对于处理ImportSelector注解处理</span></span><br><span class="line">                           candidateClass = candidate.loadClass();</span><br><span class="line">                           <span class="type">ImportSelector</span> <span class="variable">selector</span> <span class="operator">=</span> (ImportSelector)ParserStrategyUtils.instantiateClass(candidateClass, ImportSelector.class, <span class="built_in">this</span>.environment, <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.registry);</span><br><span class="line">                           Predicate&lt;String&gt; selectorFilter = selector.getExclusionFilter();</span><br><span class="line">                           <span class="keyword">if</span> (selectorFilter != <span class="literal">null</span>) {</span><br><span class="line">                               exclusionFilter = exclusionFilter.or(selectorFilter);</span><br><span class="line">                           }</span><br><span class="line">                           <span class="keyword">if</span> (selector <span class="keyword">instanceof</span> DeferredImportSelector) {</span><br><span class="line">                               <span class="built_in">this</span>.deferredImportSelectorHandler.handle(configClass, (DeferredImportSelector)selector);</span><br><span class="line">                           } <span class="keyword">else</span> {</span><br><span class="line">                               String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());</span><br><span class="line">                               Collection&lt;ConfigurationClassParser.SourceClass&gt; importSourceClasses = <span class="built_in">this</span>.asSourceClasses(importClassNames, exclusionFilter);</span><br><span class="line">                               <span class="built_in">this</span>.processImports(configClass, currentSourceClass, importSourceClasses, exclusionFilter, <span class="literal">false</span>);</span><br><span class="line">                           }</span><br><span class="line">                       } <span class="keyword">else</span> <span class="keyword">if</span> (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) {</span><br><span class="line"><span class="comment">//对于ImportBeanDefinitionRegistrar接口处理</span></span><br><span class="line">                           candidateClass = candidate.loadClass();</span><br><span class="line">                           <span class="type">ImportBeanDefinitionRegistrar</span> <span class="variable">registrar</span> <span class="operator">=</span> (ImportBeanDefinitionRegistrar)ParserStrategyUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class, <span class="built_in">this</span>.environment, <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.registry);</span><br><span class="line">                           configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());</span><br><span class="line">                       } <span class="keyword">else</span> {</span><br><span class="line">                           <span class="built_in">this</span>.importStack.registerImport(currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());</span><br><span class="line"><span class="comment">//对于@Configuration注解处理</span></span><br><span class="line">                           <span class="built_in">this</span>.processConfigurationClass(candidate.asConfigClass(configClass), exclusionFilter);</span><br><span class="line">                       }</span><br><span class="line"><span class="comment">//....省略部分代码</span></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p><strong>千里之行，始于足下。这里是SpringBoot教程系列第十一篇，所有项目源码均可以在我的<a href="https://github.com/mytianya/springboot-tutorials" title="GitHub">GitHub</a>上面下载源码。</strong></p></div><script src="https://jsd.onmicrosoft.cn/npm/hexo-theme-a4@latest/source/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;.article-gallery&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;上一篇springboot2.x基础教程：@Async开启异步任务我们使用了@EnableAsync注解来启用异步执行。&lt;br&gt;SpringBoot框架中@Enable*注解有很多例如：@</summary>
      
    
    
    
    <category term="java" scheme="https://mytianya.github.io/categories/java/"/>
    
    
    <category term="springboot" scheme="https://mytianya.github.io/tags/springboot/"/>
    
  </entry>
  
</feed>
